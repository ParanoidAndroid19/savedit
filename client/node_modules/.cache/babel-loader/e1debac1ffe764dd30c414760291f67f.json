{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* A class representing a wiki page on a subreddit.\n*\n* **Note:** Due to a bug in reddit's CORS settings, it is not possible to fetch the contents of a wiki page on a private\nsubreddit while running snoowrap in a browser. (This issue does not apply when running snoowrap in Node.js.)\n*\n* <style> #WikiPage {display: none} </style>\n* @extends RedditContent\n* @example\n*\n* // Get a wiki page on a given subreddit by name\n* r.getSubreddit('AskReddit').getWikiPage('rules')\n*/\n\n\nvar WikiPage = class WikiPage extends _RedditContent.default {\n  get _uri() {\n    return \"r/\".concat(this.subreddit.display_name, \"/wiki/\").concat(this.title);\n  }\n  /**\n  * @summary Gets the current settings for this wiki page.\n  * @returns {Promise} An Object representing the settings for this page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiPage('index').getSettings().then(console.log)\n  * // => WikiPageSettings { permlevel: 0, editors: [], listed: true }\n  */\n\n\n  getSettings() {\n    return this._get({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/settings/\").concat(this.title)\n    });\n  }\n  /**\n  * @summary Edits the settings for this wiki page.\n  * @param {object} options\n  * @param {boolean} options.listed Determines whether this wiki page should appear on the public list of pages for this\n  subreddit.\n  * @param {number} options.permissionLevel Determines who should be allowed to access and edit this page `0` indicates that\n  this subreddit's default wiki settings should get used, `1` indicates that only approved wiki contributors on this subreddit\n  should be able to edit this page, and `2` indicates that only mods should be able to view and edit this page.\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').editSettings({listed: false, permission_level: 1})\n  */\n\n\n  editSettings(_ref) {\n    var listed = _ref.listed,\n        permission_level = _ref.permission_level,\n        _ref$permissionLevel = _ref.permissionLevel,\n        permissionLevel = _ref$permissionLevel === void 0 ? permission_level : _ref$permissionLevel;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/settings/\").concat(this.title),\n      form: {\n        listed,\n        permlevel: permissionLevel\n      }\n    }).return(this);\n  }\n\n  _modifyEditor(_ref2) {\n    var name = _ref2.name,\n        action = _ref2.action;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/alloweditor/\").concat(action),\n      form: {\n        page: this.title,\n        username: name\n      }\n    });\n  }\n  /**\n  * @summary Makes the given user an approved editor of this wiki page.\n  * @param {object} options\n  * @param {string} options.name The name of the user to be added\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').addEditor({name: 'actually_an_aardvark'})\n  */\n\n\n  addEditor(_ref3) {\n    var name = _ref3.name;\n    return this._modifyEditor({\n      name,\n      action: 'add'\n    }).return(this);\n  }\n  /**\n  * @summary Revokes this user's approved editor status for this wiki page\n  * @param {object} options\n  * @param {string} options.name The name of the user to be removed\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').removeEditor({name: 'actually_an_aardvark'})\n  */\n\n\n  removeEditor(_ref4) {\n    var name = _ref4.name;\n    return this._modifyEditor({\n      name,\n      action: 'del'\n    }).return(this);\n  }\n  /**\n  * @summary Edits this wiki page, or creates it if it does not exist yet.\n  * @param {object} options\n  * @param {string} options.text The new content of the page, in markdown.\n  * @param {string} [options.reason] The edit reason that will appear in this page's revision history. 256 characters max\n  * @param {string} [options.previousRevision] Determines which revision this edit should be added to. If this parameter is\n  omitted, this edit is simply added to the most recent revision.\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').edit({text: 'Welcome', reason: 'Added a welcome message'})\n  */\n\n\n  edit(_ref5) {\n    var text = _ref5.text,\n        reason = _ref5.reason,\n        previous_revision = _ref5.previous_revision,\n        _ref5$previousRevisio = _ref5.previousRevision,\n        previousRevision = _ref5$previousRevisio === void 0 ? previous_revision : _ref5$previousRevisio;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/edit\"),\n      form: {\n        content: text,\n        page: this.title,\n        previous: previousRevision,\n        reason\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Gets a list of revisions for this wiki page.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing revisions of this page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getRevisions({limit: 1}).then(console.log)\n  * // => Listing [\n  * //  {\n  * //    timestamp: 1460973194,\n  * //    reason: 'Added a welcome message',\n  * //    author: RedditUser { name: 'not_an_aardvark', id: 'k83md', ... },\n  * //    page: 'index',\n  * //    id: '506370b4-0508-11e6-b550-0e69f29e0c4d'\n  * //  }\n  * // ]\n  */\n\n\n  getRevisions(options) {\n    return this._getListing({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/revisions/\").concat(this.title),\n      qs: options\n    });\n  }\n  /**\n  * @summary Hides the given revision from this page's public revision history.\n  * @param {object} options\n  * @param {string} options.id The revision's id\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').hideRevision({id: '506370b4-0508-11e6-b550-0e69f29e0c4d'})\n  */\n\n\n  hideRevision(_ref6) {\n    var id = _ref6.id;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/hide\"),\n      qs: {\n        page: this.title,\n        revision: id\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Reverts this wiki page to the given point.\n  * @param {object} options\n  * @param {string} options.id The id of the revision that this page should be reverted to\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').revert({id: '506370b4-0508-11e6-b550-0e69f29e0c4d'})\n  */\n\n\n  revert(_ref7) {\n    var id = _ref7.id;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/revert\"),\n      qs: {\n        page: this.title,\n        revision: id\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Gets a list of discussions about this wiki page.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing discussions about this page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiPage('index').getDiscussions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getDiscussions(options) {\n    return this._getListing({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/discussions/\").concat(this.title),\n      qs: options\n    });\n  }\n\n};\nvar _default = WikiPage;\nexports.default = _default;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/8. savedit/client/node_modules/snoowrap/dist/objects/WikiPage.js"],"names":["Object","defineProperty","exports","value","default","_RedditContent","_interopRequireDefault","require","obj","__esModule","WikiPage","_uri","concat","subreddit","display_name","title","getSettings","_get","uri","editSettings","_ref","listed","permission_level","_ref$permissionLevel","permissionLevel","_post","form","permlevel","return","_modifyEditor","_ref2","name","action","page","username","addEditor","_ref3","removeEditor","_ref4","edit","_ref5","text","reason","previous_revision","_ref5$previousRevisio","previousRevision","content","previous","getRevisions","options","_getListing","qs","hideRevision","_ref6","id","revision","revert","_ref7","getDiscussions","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* A class representing a wiki page on a subreddit.\n*\n* **Note:** Due to a bug in reddit's CORS settings, it is not possible to fetch the contents of a wiki page on a private\nsubreddit while running snoowrap in a browser. (This issue does not apply when running snoowrap in Node.js.)\n*\n* <style> #WikiPage {display: none} </style>\n* @extends RedditContent\n* @example\n*\n* // Get a wiki page on a given subreddit by name\n* r.getSubreddit('AskReddit').getWikiPage('rules')\n*/\nvar WikiPage = class WikiPage extends _RedditContent.default {\n  get _uri() {\n    return \"r/\".concat(this.subreddit.display_name, \"/wiki/\").concat(this.title);\n  }\n  /**\n  * @summary Gets the current settings for this wiki page.\n  * @returns {Promise} An Object representing the settings for this page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiPage('index').getSettings().then(console.log)\n  * // => WikiPageSettings { permlevel: 0, editors: [], listed: true }\n  */\n\n\n  getSettings() {\n    return this._get({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/settings/\").concat(this.title)\n    });\n  }\n  /**\n  * @summary Edits the settings for this wiki page.\n  * @param {object} options\n  * @param {boolean} options.listed Determines whether this wiki page should appear on the public list of pages for this\n  subreddit.\n  * @param {number} options.permissionLevel Determines who should be allowed to access and edit this page `0` indicates that\n  this subreddit's default wiki settings should get used, `1` indicates that only approved wiki contributors on this subreddit\n  should be able to edit this page, and `2` indicates that only mods should be able to view and edit this page.\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').editSettings({listed: false, permission_level: 1})\n  */\n\n\n  editSettings(_ref) {\n    var listed = _ref.listed,\n        permission_level = _ref.permission_level,\n        _ref$permissionLevel = _ref.permissionLevel,\n        permissionLevel = _ref$permissionLevel === void 0 ? permission_level : _ref$permissionLevel;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/settings/\").concat(this.title),\n      form: {\n        listed,\n        permlevel: permissionLevel\n      }\n    }).return(this);\n  }\n\n  _modifyEditor(_ref2) {\n    var name = _ref2.name,\n        action = _ref2.action;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/alloweditor/\").concat(action),\n      form: {\n        page: this.title,\n        username: name\n      }\n    });\n  }\n  /**\n  * @summary Makes the given user an approved editor of this wiki page.\n  * @param {object} options\n  * @param {string} options.name The name of the user to be added\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').addEditor({name: 'actually_an_aardvark'})\n  */\n\n\n  addEditor(_ref3) {\n    var name = _ref3.name;\n    return this._modifyEditor({\n      name,\n      action: 'add'\n    }).return(this);\n  }\n  /**\n  * @summary Revokes this user's approved editor status for this wiki page\n  * @param {object} options\n  * @param {string} options.name The name of the user to be removed\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').removeEditor({name: 'actually_an_aardvark'})\n  */\n\n\n  removeEditor(_ref4) {\n    var name = _ref4.name;\n    return this._modifyEditor({\n      name,\n      action: 'del'\n    }).return(this);\n  }\n  /**\n  * @summary Edits this wiki page, or creates it if it does not exist yet.\n  * @param {object} options\n  * @param {string} options.text The new content of the page, in markdown.\n  * @param {string} [options.reason] The edit reason that will appear in this page's revision history. 256 characters max\n  * @param {string} [options.previousRevision] Determines which revision this edit should be added to. If this parameter is\n  omitted, this edit is simply added to the most recent revision.\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').edit({text: 'Welcome', reason: 'Added a welcome message'})\n  */\n\n\n  edit(_ref5) {\n    var text = _ref5.text,\n        reason = _ref5.reason,\n        previous_revision = _ref5.previous_revision,\n        _ref5$previousRevisio = _ref5.previousRevision,\n        previousRevision = _ref5$previousRevisio === void 0 ? previous_revision : _ref5$previousRevisio;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/edit\"),\n      form: {\n        content: text,\n        page: this.title,\n        previous: previousRevision,\n        reason\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Gets a list of revisions for this wiki page.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing revisions of this page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getRevisions({limit: 1}).then(console.log)\n  * // => Listing [\n  * //  {\n  * //    timestamp: 1460973194,\n  * //    reason: 'Added a welcome message',\n  * //    author: RedditUser { name: 'not_an_aardvark', id: 'k83md', ... },\n  * //    page: 'index',\n  * //    id: '506370b4-0508-11e6-b550-0e69f29e0c4d'\n  * //  }\n  * // ]\n  */\n\n\n  getRevisions(options) {\n    return this._getListing({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/revisions/\").concat(this.title),\n      qs: options\n    });\n  }\n  /**\n  * @summary Hides the given revision from this page's public revision history.\n  * @param {object} options\n  * @param {string} options.id The revision's id\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').hideRevision({id: '506370b4-0508-11e6-b550-0e69f29e0c4d'})\n  */\n\n\n  hideRevision(_ref6) {\n    var id = _ref6.id;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/hide\"),\n      qs: {\n        page: this.title,\n        revision: id\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Reverts this wiki page to the given point.\n  * @param {object} options\n  * @param {string} options.id The id of the revision that this page should be reverted to\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').revert({id: '506370b4-0508-11e6-b550-0e69f29e0c4d'})\n  */\n\n\n  revert(_ref7) {\n    var id = _ref7.id;\n    return this._post({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/revert\"),\n      qs: {\n        page: this.title,\n        revision: id\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Gets a list of discussions about this wiki page.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing discussions about this page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiPage('index').getDiscussions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getDiscussions(options) {\n    return this._getListing({\n      uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/discussions/\").concat(this.title),\n      qs: options\n    });\n  }\n\n};\nvar _default = WikiPage;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}