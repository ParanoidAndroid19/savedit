{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"../constants.js\");\n\nvar _errors = require(\"../errors.js\");\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n* A class representing a reddit user\n* <style> #RedditUser {display: none} </style>\n* @extends ReplyableContent\n* @example\n*\n* // Get a user with the given username\n* r.getUser('spez')\n*/\n\n\nvar RedditUser = class RedditUser extends _RedditContent.default {\n  get _uri() {\n    if (typeof this.name !== 'string' || !_constants.USERNAME_REGEX.test(this.name)) {\n      throw new _errors.InvalidUserError(this.name);\n    }\n\n    return \"user/\".concat(this.name, \"/about\");\n  }\n  /**\n  * @summary Gives reddit gold to a user\n  * @param {number} months The number of months of gold to give. This must be a number between 1 and 36.\n  * @returns {Promise} A Promise that fulfills when the request is complete\n  * @example r.getUser('not_an_aardvark').giveGold(12)\n  */\n\n\n  giveGold(months) {\n    /* Ideally this would allow for more than 36 months by sending multiple requests, but I don't have the resources to test\n    that code, and it's probably better that such a big investment be deliberate anyway. */\n    if (typeof months !== 'number' || months < 1 || months > 36) {\n      throw new _errors.InvalidMethodCallError('Invalid argument to RedditUser#giveGold; `months` must be between 1 and 36.');\n    }\n\n    return this._post({\n      uri: \"api/v1/gold/give/\".concat(this.name),\n      form: {\n        months\n      }\n    });\n  }\n  /**\n  * Assigns flair to this user on a given subreddit (as a moderator).\n  * @param {object} options\n  * @param {string} options.subredditName The subreddit that flair should be assigned on\n  * @param {string} [options.text=''] The text that the user's flair should have\n  * @param {string} [options.cssClass=''] The CSS class that the user's flair should have\n  * @returns {Promise} A Promise that fulfills with the current user after the request is complete\n  * @example r.getUser('not_an_aardvark').assignFlair({subredditName: 'snoowrap', text: \"Isn't an aardvark\"})\n  */\n\n\n  assignFlair(options) {\n    return this._r._assignFlair(_objectSpread({}, options, {\n      name: this.name\n    })).return(this);\n  }\n  /**\n  * @summary Adds this user as a friend, or modifies their friend note.\n  * @desc **Note:** reddit.com only permits \"notes\" to be added on friends if the authenticated account has a subscription to\n  reddit gold.\n  * @param {object} options\n  * @param {string} [options.note] An optional note to add on the user (300 characters max)\n  * @returns {Promise} A Promise that fulfills when this request is complete\n  * @example r.getUser('actually_an_aardvark').friend({note: 'Is an aardvark'})\n  */\n\n\n  friend() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        note = _ref.note;\n\n    return this._put({\n      uri: \"api/v1/me/friends/\".concat(this.name),\n      body: {\n        user: this.name,\n        note\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes this user from the requester's friend list.\n  * @returns {Promise} A Promise that fulfills with this user when the request is complete\n  * @example r.getUser('actually_an_aardvark').unfriend()\n  */\n\n\n  unfriend() {\n    return this._delete({\n      uri: \"api/v1/me/friends/\".concat(this.name)\n    });\n  }\n  /**\n  * @summary Gets information on this user related to their presence on the friend list.\n  * @returns {Promise} A Promise that fulfills with an object containing friend information\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getFriendInformation().then(console.log)\n  * // => { date: 1460318190, note: 'Is an aardvark', name: 'actually_an_aardvark', id: 't2_q3519' }\n  */\n\n\n  getFriendInformation() {\n    return this._get({\n      uri: \"api/v1/me/friends/\".concat(this.name)\n    });\n  }\n  /**\n  * @summary Gets a list of this user's trophies.\n  * @returns {Promise} A TrophyList containing this user's trophies\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getTrophies().then(console.log)\n  * // => TrophyList { trophies: [\n  * //  Trophy { ... },\n  * //  Trophy { ... },\n  * //  ...\n  * // ] }\n  */\n\n\n  getTrophies() {\n    return this._get({\n      uri: \"api/v1/user/\".concat(this.name, \"/trophies\")\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content this user has submitted.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getUser('spez').getOverview().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getOverview(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/overview\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's submissions.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getUser('spez').getSubmissions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getSubmissions(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/submitted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's comments.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Comments\n  * @example\n  *\n  * r.getUser('spez').getComments().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getComments(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/comments\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has upvoted.\n  * @desc **Note**: This can only be used to view one's own upvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getUpvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getUpvotedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/upvoted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has downvoted.\n  * @desc **Note**: This can only be used to view one's own downvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getDownvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getDownvotedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/downvoted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the submissions that this user has hidden.\n  * @desc **Note**: This can only be used to view one's own set of hidden posts, as reddit will return a 403 error when\n  attempting to view another users' hidden posts.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getMe().getHiddenContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getHiddenContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/hidden\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has saved.\n  * @desc **Note**: This can only be used to view one's own set of saved content, as reddit will return a 403 error when\n  attempting to view other users' saved content.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments.\n  * @example\n  *\n  * r.getMe().getSavedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getSavedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/saved\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's content which has been gilded.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getGildedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getGildedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/gilded\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a multireddit belonging to this user.\n  * @param {string} name The name of the multireddit\n  * @returns {MultiReddit} An unfetched MultiReddit object\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddit('coding_languages')\n  * // => MultiReddit {\n  * //  name: 'coding_languages',\n  * //  curator: RedditUser { name: 'multi-mod' },\n  * //  path: '/user/multi-mod/m/coding_languages'\n  * // }\n  */\n\n\n  getMultireddit(name) {\n    return this._r._newObject('MultiReddit', {\n      name,\n      curator: this\n    });\n  }\n  /**\n  * @summary Gets an Array of all of this user's MultiReddits.\n  * @returns {Promise} A Promise that fulfills with an Array containing MultiReddits.\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddits().then(console.log)\n  *\n  * // => [\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   ...\n  * ]\n  */\n\n\n  getMultireddits() {\n    return this._get({\n      uri: \"api/multi/user/\".concat(this.name),\n      qs: {\n        expand_srs: true\n      }\n    });\n  }\n\n};\nvar _default = RedditUser;\nexports.default = _default;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/8. savedit/client/node_modules/snoowrap/dist/objects/RedditUser.js"],"names":["Object","defineProperty","exports","value","default","_constants","require","_errors","_RedditContent","_interopRequireDefault","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","RedditUser","_uri","name","USERNAME_REGEX","test","InvalidUserError","concat","giveGold","months","InvalidMethodCallError","_post","uri","form","assignFlair","options","_r","_assignFlair","return","friend","_ref","undefined","note","_put","body","user","unfriend","_delete","getFriendInformation","_get","getTrophies","getOverview","_getListing","qs","getSubmissions","getComments","getUpvotedContent","getDownvotedContent","getHiddenContent","getSavedContent","getGildedContent","getMultireddit","_newObject","curator","getMultireddits","expand_srs","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"../constants.js\");\n\nvar _errors = require(\"../errors.js\");\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n* A class representing a reddit user\n* <style> #RedditUser {display: none} </style>\n* @extends ReplyableContent\n* @example\n*\n* // Get a user with the given username\n* r.getUser('spez')\n*/\nvar RedditUser = class RedditUser extends _RedditContent.default {\n  get _uri() {\n    if (typeof this.name !== 'string' || !_constants.USERNAME_REGEX.test(this.name)) {\n      throw new _errors.InvalidUserError(this.name);\n    }\n\n    return \"user/\".concat(this.name, \"/about\");\n  }\n  /**\n  * @summary Gives reddit gold to a user\n  * @param {number} months The number of months of gold to give. This must be a number between 1 and 36.\n  * @returns {Promise} A Promise that fulfills when the request is complete\n  * @example r.getUser('not_an_aardvark').giveGold(12)\n  */\n\n\n  giveGold(months) {\n    /* Ideally this would allow for more than 36 months by sending multiple requests, but I don't have the resources to test\n    that code, and it's probably better that such a big investment be deliberate anyway. */\n    if (typeof months !== 'number' || months < 1 || months > 36) {\n      throw new _errors.InvalidMethodCallError('Invalid argument to RedditUser#giveGold; `months` must be between 1 and 36.');\n    }\n\n    return this._post({\n      uri: \"api/v1/gold/give/\".concat(this.name),\n      form: {\n        months\n      }\n    });\n  }\n  /**\n  * Assigns flair to this user on a given subreddit (as a moderator).\n  * @param {object} options\n  * @param {string} options.subredditName The subreddit that flair should be assigned on\n  * @param {string} [options.text=''] The text that the user's flair should have\n  * @param {string} [options.cssClass=''] The CSS class that the user's flair should have\n  * @returns {Promise} A Promise that fulfills with the current user after the request is complete\n  * @example r.getUser('not_an_aardvark').assignFlair({subredditName: 'snoowrap', text: \"Isn't an aardvark\"})\n  */\n\n\n  assignFlair(options) {\n    return this._r._assignFlair(_objectSpread({}, options, {\n      name: this.name\n    })).return(this);\n  }\n  /**\n  * @summary Adds this user as a friend, or modifies their friend note.\n  * @desc **Note:** reddit.com only permits \"notes\" to be added on friends if the authenticated account has a subscription to\n  reddit gold.\n  * @param {object} options\n  * @param {string} [options.note] An optional note to add on the user (300 characters max)\n  * @returns {Promise} A Promise that fulfills when this request is complete\n  * @example r.getUser('actually_an_aardvark').friend({note: 'Is an aardvark'})\n  */\n\n\n  friend() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        note = _ref.note;\n\n    return this._put({\n      uri: \"api/v1/me/friends/\".concat(this.name),\n      body: {\n        user: this.name,\n        note\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes this user from the requester's friend list.\n  * @returns {Promise} A Promise that fulfills with this user when the request is complete\n  * @example r.getUser('actually_an_aardvark').unfriend()\n  */\n\n\n  unfriend() {\n    return this._delete({\n      uri: \"api/v1/me/friends/\".concat(this.name)\n    });\n  }\n  /**\n  * @summary Gets information on this user related to their presence on the friend list.\n  * @returns {Promise} A Promise that fulfills with an object containing friend information\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getFriendInformation().then(console.log)\n  * // => { date: 1460318190, note: 'Is an aardvark', name: 'actually_an_aardvark', id: 't2_q3519' }\n  */\n\n\n  getFriendInformation() {\n    return this._get({\n      uri: \"api/v1/me/friends/\".concat(this.name)\n    });\n  }\n  /**\n  * @summary Gets a list of this user's trophies.\n  * @returns {Promise} A TrophyList containing this user's trophies\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getTrophies().then(console.log)\n  * // => TrophyList { trophies: [\n  * //  Trophy { ... },\n  * //  Trophy { ... },\n  * //  ...\n  * // ] }\n  */\n\n\n  getTrophies() {\n    return this._get({\n      uri: \"api/v1/user/\".concat(this.name, \"/trophies\")\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content this user has submitted.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getUser('spez').getOverview().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getOverview(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/overview\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's submissions.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getUser('spez').getSubmissions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getSubmissions(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/submitted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's comments.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Comments\n  * @example\n  *\n  * r.getUser('spez').getComments().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getComments(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/comments\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has upvoted.\n  * @desc **Note**: This can only be used to view one's own upvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getUpvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getUpvotedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/upvoted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has downvoted.\n  * @desc **Note**: This can only be used to view one's own downvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getDownvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getDownvotedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/downvoted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the submissions that this user has hidden.\n  * @desc **Note**: This can only be used to view one's own set of hidden posts, as reddit will return a 403 error when\n  attempting to view another users' hidden posts.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getMe().getHiddenContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getHiddenContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/hidden\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has saved.\n  * @desc **Note**: This can only be used to view one's own set of saved content, as reddit will return a 403 error when\n  attempting to view other users' saved content.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments.\n  * @example\n  *\n  * r.getMe().getSavedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getSavedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/saved\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's content which has been gilded.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getGildedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getGildedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/gilded\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a multireddit belonging to this user.\n  * @param {string} name The name of the multireddit\n  * @returns {MultiReddit} An unfetched MultiReddit object\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddit('coding_languages')\n  * // => MultiReddit {\n  * //  name: 'coding_languages',\n  * //  curator: RedditUser { name: 'multi-mod' },\n  * //  path: '/user/multi-mod/m/coding_languages'\n  * // }\n  */\n\n\n  getMultireddit(name) {\n    return this._r._newObject('MultiReddit', {\n      name,\n      curator: this\n    });\n  }\n  /**\n  * @summary Gets an Array of all of this user's MultiReddits.\n  * @returns {Promise} A Promise that fulfills with an Array containing MultiReddits.\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddits().then(console.log)\n  *\n  * // => [\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   ...\n  * ]\n  */\n\n\n  getMultireddits() {\n    return this._get({\n      uri: \"api/multi/user/\".concat(this.name),\n      qs: {\n        expand_srs: true\n      }\n    });\n  }\n\n};\nvar _default = RedditUser;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}