{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _VoteableContent = _interopRequireDefault(require(\"./VoteableContent.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar api_type = 'json';\n/**\n* A class representing a reddit submission\n* <style> #Submission {display: none} </style>\n* @extends VoteableContent\n* @example\n*\n* // Get a submission by ID\n* r.getSubmission('2np694')\n*/\n\nvar Submission = class Submission extends _VoteableContent.default {\n  constructor(data, _r, _hasFetched) {\n    super(data, _r, _hasFetched);\n\n    if (_hasFetched) {\n      this.comments = this.comments || (0, _helpers.getEmptyRepliesListing)(this);\n    }\n  }\n\n  get _uri() {\n    return \"comments/\".concat(this.name.slice(3));\n  }\n  /**\n  * @summary Hides this Submission, preventing it from appearing on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').hide()\n  */\n\n\n  hide() {\n    return this._post({\n      uri: 'api/hide',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unhides this Submission, allowing it to reappear on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unhide()\n  */\n\n\n  unhide() {\n    return this._post({\n      uri: 'api/unhide',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Locks this Submission, preventing new comments from being posted on it.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').lock()\n  */\n\n\n  lock() {\n    return this._post({\n      uri: 'api/lock',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unlocks this Submission, allowing comments to be posted on it again.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unlock()\n  */\n\n\n  unlock() {\n    return this._post({\n      uri: 'api/unlock',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Marks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markNsfw()\n  */\n\n\n  markNsfw() {\n    return this._post({\n      uri: 'api/marknsfw',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unmarks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unmarkNsfw()\n  */\n\n\n  unmarkNsfw() {\n    return this._post({\n      uri: 'api/unmarknsfw',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Mark a submission as a spoiler\n  * @desc **Note:** This will silently fail if the subreddit has disabled spoilers.\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').markSpoiler()\n  */\n\n\n  markSpoiler() {\n    return this._post({\n      uri: 'api/spoiler',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unmark a submission as a spoiler\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').unmarkSpoiler()\n  */\n\n\n  unmarkSpoiler() {\n    return this._post({\n      uri: 'api/unspoiler',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Sets the contest mode status of this submission.\n  * @private\n  * @param {boolean} state The desired contest mode status\n  * @returns {Promise} The updated version of this Submission\n  */\n\n\n  _setContestModeEnabled(state) {\n    return this._post({\n      uri: 'api/set_contest_mode',\n      form: {\n        api_type,\n        state,\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Enables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').enableContestMode()\n  */\n\n\n  enableContestMode() {\n    return this._setContestModeEnabled(true);\n  }\n  /**\n  * @summary Disables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').disableContestMode()\n  */\n\n\n  disableContestMode() {\n    return this._setContestModeEnabled(false);\n  }\n\n  _setStickied(_ref) {\n    var state = _ref.state,\n        num = _ref.num;\n    return this._post({\n      uri: 'api/set_subreddit_sticky',\n      form: {\n        api_type,\n        state,\n        num,\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Stickies this Submission.\n  * @param {object} [options]\n  * @param {number} [options.num=1] The sticky slot to put this submission in; this should be either 1 or 2.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').sticky({num: 2})\n  */\n\n\n  sticky() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$num = _ref2.num,\n        num = _ref2$num === void 0 ? 1 : _ref2$num;\n\n    return this._setStickied({\n      state: true,\n      num\n    });\n  }\n  /**\n  * @summary Unstickies this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unsticky()\n  */\n\n\n  unsticky() {\n    return this._setStickied({\n      state: false\n    });\n  }\n  /**\n  * @summary Sets the suggested comment sort method on this Submission\n  * @desc **Note**: To enable contest mode, use {@link Submission#enableContestMode} instead.\n  * @param {string} sort The suggested sort method. This should be one of\n  `confidence, top, new, controversial, old, random, qa, blank`\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').setSuggestedSort('new')\n  */\n\n\n  setSuggestedSort(sort) {\n    return this._post({\n      uri: 'api/set_suggested_sort',\n      form: {\n        api_type,\n        id: this.name,\n        sort\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Marks this submission as 'visited'.\n  * @desc **Note**: This function only works if the authenticated account has a subscription to reddit gold.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markAsRead()\n  */\n\n\n  markAsRead() {\n    return this._post({\n      uri: 'api/store_visits',\n      form: {\n        links: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Gets a Listing of other submissions on reddit that had the same link as this one.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @returns {Promise} A Listing of other Submission objects\n  * @example r.getSubmission('2np694').getDuplicates()\n  */\n\n\n  getDuplicates() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this._getListing({\n      uri: \"duplicates/\".concat(this.name.slice(3)),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of Submissions that are related to this one.\n  * @deprecated This function uses the <code>/related/submission_id</code> endpoint, which was recently changed on reddit.com;\n  instead of returning a Listing containing related posts, the reddit API now simply returns the post itself. As such, this\n  function only exists for backwards compatability and should not be used in practice.\n  * @param {object} [options={}] ~~Options for the resulting Listing~~\n  * @returns {Promise} ~~A Listing of other Submission objects~~ The submission in question.\n  * @example r.getSubmission('2np694').getRelated()\n  */\n\n\n  getRelated() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this._getListing({\n      uri: \"related/\".concat(this.name.slice(3)),\n      qs: options\n    }).tap(function (result) {\n      if (result.constructor._name === 'Submission') {\n        _this._r._warn('Submission#getRelated has been deprecated upstream, and will not work as expected.');\n      }\n    });\n  }\n  /**\n  * @summary Gets a list of flair template options for this post.\n  * @returns {Promise} An Array of flair templates\n  * @example\n  *\n  * r.getSubmission('2np694').getLinkFlairTemplates().then(console.log)\n  *\n  * // => [\n  * //   { flair_text: 'Text 1', flair_css_class: '', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   { flair_text: 'Text 2', flair_css_class: 'aa', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   ...\n  * // ]\n  */\n\n\n  getLinkFlairTemplates() {\n    var _this2 = this;\n\n    return this.fetch().get('subreddit').then(function (sub) {\n      return sub.getLinkFlairTemplates(_this2.name);\n    });\n  }\n  /**\n  * @summary Assigns flair on this Submission (as a moderator; also see [selectFlair]{@link Submission#selectFlair})\n  * @param {object} options\n  * @param {string} options.text The text that this link's flair should have\n  * @param {string} options.cssClass The CSS class that the link's flair should have\n  * @returns {Promise} A Promise that fulfills with an updated version of this Submission\n  * @example r.getSubmission('2np694').assignFlair({text: 'this is a flair text', cssClass: 'these are css classes'})\n  */\n\n\n  assignFlair(options) {\n    return this._r._assignFlair(_objectSpread({}, options, {\n      link: this.name,\n      subredditName: this.subreddit.display_name\n    })).return(this);\n  }\n  /**\n  * @summary Selects a flair for this Submission (as the OP; also see [assignFlair]{@link Submission#assignFlair})\n  * @param {object} options\n  * @param {string} options.flair_template_id A flair template ID to use for this Submission. (This should be obtained\n  beforehand using {@link getLinkFlairTemplates}.)\n  * @param {string} [options.text] The flair text to use for the submission. (This is only necessary/useful if the given flair\n  template has the `text_editable` property set to `true`.)\n  * @returns {Promise} A Promise that fulfills with this objects after the request is complete\n  * @example r.getSubmission('2np694').selectFlair({flair_template_id: 'e3340d80-8152-11e4-a76a-22000bc1096c'})\n  */\n\n\n  selectFlair(options) {\n    return this._r._selectFlair(_objectSpread({}, options, {\n      link: this.name,\n      subredditName: this.subreddit.display_name\n    })).return(this);\n  }\n  /**\n   * @summary Crossposts this submission to a different subreddit\n   * @desc **NOTE**: To create a crosspost, the authenticated account must be subscribed to the subreddit where\n   * the crosspost is being submitted, and that subreddit be configured to allow crossposts.\n   * @param {object} options An object containing details about the submission\n   * @param {string} options.subredditName The name of the subreddit that the crosspost should be submitted to\n   * @param {string} options.title The title of the crosspost\n   * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n   * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n   the past, reddit will return an error. This could be used to avoid accidental reposts.\n   * @returns {Promise} The newly-created Submission object\n   * @example\n   *\n   * await r.getSubmission('6vths0').submitCrosspost({ title: 'I found an interesting post', subredditName: 'snoowrap' })\n   */\n\n\n  submitCrosspost(options) {\n    return this._r.submitCrosspost(_objectSpread({}, options, {\n      originalPost: this\n    }));\n  }\n\n};\nvar _default = Submission;\nexports.default = _default;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/8. savedit/node_modules/snoowrap/dist/objects/Submission.js"],"names":["Object","defineProperty","exports","value","default","_helpers","require","_VoteableContent","_interopRequireDefault","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","api_type","Submission","constructor","data","_r","_hasFetched","comments","getEmptyRepliesListing","_uri","concat","name","slice","hide","_post","uri","form","id","return","unhide","lock","unlock","markNsfw","unmarkNsfw","markSpoiler","unmarkSpoiler","_setContestModeEnabled","state","enableContestMode","disableContestMode","_setStickied","_ref","num","sticky","_ref2","undefined","_ref2$num","unsticky","setSuggestedSort","sort","markAsRead","links","getDuplicates","options","_getListing","qs","getRelated","_this","tap","result","_name","_warn","getLinkFlairTemplates","_this2","fetch","get","then","sub","assignFlair","_assignFlair","link","subredditName","subreddit","display_name","selectFlair","_selectFlair","submitCrosspost","originalPost","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _VoteableContent = _interopRequireDefault(require(\"./VoteableContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar api_type = 'json';\n/**\n* A class representing a reddit submission\n* <style> #Submission {display: none} </style>\n* @extends VoteableContent\n* @example\n*\n* // Get a submission by ID\n* r.getSubmission('2np694')\n*/\n\nvar Submission = class Submission extends _VoteableContent.default {\n  constructor(data, _r, _hasFetched) {\n    super(data, _r, _hasFetched);\n\n    if (_hasFetched) {\n      this.comments = this.comments || (0, _helpers.getEmptyRepliesListing)(this);\n    }\n  }\n\n  get _uri() {\n    return \"comments/\".concat(this.name.slice(3));\n  }\n  /**\n  * @summary Hides this Submission, preventing it from appearing on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').hide()\n  */\n\n\n  hide() {\n    return this._post({\n      uri: 'api/hide',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unhides this Submission, allowing it to reappear on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unhide()\n  */\n\n\n  unhide() {\n    return this._post({\n      uri: 'api/unhide',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Locks this Submission, preventing new comments from being posted on it.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').lock()\n  */\n\n\n  lock() {\n    return this._post({\n      uri: 'api/lock',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unlocks this Submission, allowing comments to be posted on it again.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unlock()\n  */\n\n\n  unlock() {\n    return this._post({\n      uri: 'api/unlock',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Marks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markNsfw()\n  */\n\n\n  markNsfw() {\n    return this._post({\n      uri: 'api/marknsfw',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unmarks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unmarkNsfw()\n  */\n\n\n  unmarkNsfw() {\n    return this._post({\n      uri: 'api/unmarknsfw',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Mark a submission as a spoiler\n  * @desc **Note:** This will silently fail if the subreddit has disabled spoilers.\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').markSpoiler()\n  */\n\n\n  markSpoiler() {\n    return this._post({\n      uri: 'api/spoiler',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unmark a submission as a spoiler\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').unmarkSpoiler()\n  */\n\n\n  unmarkSpoiler() {\n    return this._post({\n      uri: 'api/unspoiler',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Sets the contest mode status of this submission.\n  * @private\n  * @param {boolean} state The desired contest mode status\n  * @returns {Promise} The updated version of this Submission\n  */\n\n\n  _setContestModeEnabled(state) {\n    return this._post({\n      uri: 'api/set_contest_mode',\n      form: {\n        api_type,\n        state,\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Enables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').enableContestMode()\n  */\n\n\n  enableContestMode() {\n    return this._setContestModeEnabled(true);\n  }\n  /**\n  * @summary Disables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').disableContestMode()\n  */\n\n\n  disableContestMode() {\n    return this._setContestModeEnabled(false);\n  }\n\n  _setStickied(_ref) {\n    var state = _ref.state,\n        num = _ref.num;\n    return this._post({\n      uri: 'api/set_subreddit_sticky',\n      form: {\n        api_type,\n        state,\n        num,\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Stickies this Submission.\n  * @param {object} [options]\n  * @param {number} [options.num=1] The sticky slot to put this submission in; this should be either 1 or 2.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').sticky({num: 2})\n  */\n\n\n  sticky() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$num = _ref2.num,\n        num = _ref2$num === void 0 ? 1 : _ref2$num;\n\n    return this._setStickied({\n      state: true,\n      num\n    });\n  }\n  /**\n  * @summary Unstickies this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unsticky()\n  */\n\n\n  unsticky() {\n    return this._setStickied({\n      state: false\n    });\n  }\n  /**\n  * @summary Sets the suggested comment sort method on this Submission\n  * @desc **Note**: To enable contest mode, use {@link Submission#enableContestMode} instead.\n  * @param {string} sort The suggested sort method. This should be one of\n  `confidence, top, new, controversial, old, random, qa, blank`\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').setSuggestedSort('new')\n  */\n\n\n  setSuggestedSort(sort) {\n    return this._post({\n      uri: 'api/set_suggested_sort',\n      form: {\n        api_type,\n        id: this.name,\n        sort\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Marks this submission as 'visited'.\n  * @desc **Note**: This function only works if the authenticated account has a subscription to reddit gold.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markAsRead()\n  */\n\n\n  markAsRead() {\n    return this._post({\n      uri: 'api/store_visits',\n      form: {\n        links: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Gets a Listing of other submissions on reddit that had the same link as this one.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @returns {Promise} A Listing of other Submission objects\n  * @example r.getSubmission('2np694').getDuplicates()\n  */\n\n\n  getDuplicates() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this._getListing({\n      uri: \"duplicates/\".concat(this.name.slice(3)),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of Submissions that are related to this one.\n  * @deprecated This function uses the <code>/related/submission_id</code> endpoint, which was recently changed on reddit.com;\n  instead of returning a Listing containing related posts, the reddit API now simply returns the post itself. As such, this\n  function only exists for backwards compatability and should not be used in practice.\n  * @param {object} [options={}] ~~Options for the resulting Listing~~\n  * @returns {Promise} ~~A Listing of other Submission objects~~ The submission in question.\n  * @example r.getSubmission('2np694').getRelated()\n  */\n\n\n  getRelated() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this._getListing({\n      uri: \"related/\".concat(this.name.slice(3)),\n      qs: options\n    }).tap(function (result) {\n      if (result.constructor._name === 'Submission') {\n        _this._r._warn('Submission#getRelated has been deprecated upstream, and will not work as expected.');\n      }\n    });\n  }\n  /**\n  * @summary Gets a list of flair template options for this post.\n  * @returns {Promise} An Array of flair templates\n  * @example\n  *\n  * r.getSubmission('2np694').getLinkFlairTemplates().then(console.log)\n  *\n  * // => [\n  * //   { flair_text: 'Text 1', flair_css_class: '', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   { flair_text: 'Text 2', flair_css_class: 'aa', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   ...\n  * // ]\n  */\n\n\n  getLinkFlairTemplates() {\n    var _this2 = this;\n\n    return this.fetch().get('subreddit').then(function (sub) {\n      return sub.getLinkFlairTemplates(_this2.name);\n    });\n  }\n  /**\n  * @summary Assigns flair on this Submission (as a moderator; also see [selectFlair]{@link Submission#selectFlair})\n  * @param {object} options\n  * @param {string} options.text The text that this link's flair should have\n  * @param {string} options.cssClass The CSS class that the link's flair should have\n  * @returns {Promise} A Promise that fulfills with an updated version of this Submission\n  * @example r.getSubmission('2np694').assignFlair({text: 'this is a flair text', cssClass: 'these are css classes'})\n  */\n\n\n  assignFlair(options) {\n    return this._r._assignFlair(_objectSpread({}, options, {\n      link: this.name,\n      subredditName: this.subreddit.display_name\n    })).return(this);\n  }\n  /**\n  * @summary Selects a flair for this Submission (as the OP; also see [assignFlair]{@link Submission#assignFlair})\n  * @param {object} options\n  * @param {string} options.flair_template_id A flair template ID to use for this Submission. (This should be obtained\n  beforehand using {@link getLinkFlairTemplates}.)\n  * @param {string} [options.text] The flair text to use for the submission. (This is only necessary/useful if the given flair\n  template has the `text_editable` property set to `true`.)\n  * @returns {Promise} A Promise that fulfills with this objects after the request is complete\n  * @example r.getSubmission('2np694').selectFlair({flair_template_id: 'e3340d80-8152-11e4-a76a-22000bc1096c'})\n  */\n\n\n  selectFlair(options) {\n    return this._r._selectFlair(_objectSpread({}, options, {\n      link: this.name,\n      subredditName: this.subreddit.display_name\n    })).return(this);\n  }\n  /**\n   * @summary Crossposts this submission to a different subreddit\n   * @desc **NOTE**: To create a crosspost, the authenticated account must be subscribed to the subreddit where\n   * the crosspost is being submitted, and that subreddit be configured to allow crossposts.\n   * @param {object} options An object containing details about the submission\n   * @param {string} options.subredditName The name of the subreddit that the crosspost should be submitted to\n   * @param {string} options.title The title of the crosspost\n   * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n   * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n   the past, reddit will return an error. This could be used to avoid accidental reposts.\n   * @returns {Promise} The newly-created Submission object\n   * @example\n   *\n   * await r.getSubmission('6vths0').submitCrosspost({ title: 'I found an interesting post', subredditName: 'snoowrap' })\n   */\n\n\n  submitCrosspost(options) {\n    return this._r.submitCrosspost(_objectSpread({}, options, {\n      originalPost: this\n    }));\n  }\n\n};\nvar _default = Submission;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}