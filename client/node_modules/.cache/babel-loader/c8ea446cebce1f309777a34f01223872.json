{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar WebSocket = _helpers.isBrowser ? global.WebSocket : require('ws');\nvar api_type = 'json';\n/**\n* A class representing a live reddit thread\n* <style> #LiveThread {display: none} </style>\n* @example\n*\n* // Get a livethread with the given ID\n* r.getLivethread('whrdxo8dg9n0')\n* @desc For the most part, reddit distributes the content of live threads via websocket, rather than through the REST API.\nAs such, snoowrap assigns each fetched LiveThread object a `stream` property, which takes the form of an\n[EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter). To listen for new thread updates, simply\nadd listeners to that emitter.\n\nThe following events can be emitted:\n- `update`: Occurs when a new update has been posted in this thread. Emits a `LiveUpdate` object containing information\nabout the new update.\n- `activity`: Occurs periodically when the viewer count for this thread changes.\n- `settings`: Occurs when the thread's settings change. Emits an object containing the new settings.\n- `delete`: Occurs when an update has been deleted. Emits the ID of the deleted update.\n- `strike`: Occurs when an update has been striken (marked incorrect and crossed out). Emits the ID of the striken update.\n- `embeds_ready`: Occurs when embedded media is now available for a previously-posted update.\n- `complete`: Occurs when this LiveThread has been marked as complete, and no more updates will be sent.\n\n(Note: These event types are mapped directly from reddit's categorization of the updates. The descriptions above are\nparaphrased from reddit's descriptions [here](https://www.reddit.com/dev/api#section_live).)\n\nAs an example, this would log all new livethread updates to the console:\n\n```javascript\nsomeLivethread.stream.on('update', data => {\n  console.log(data.body);\n});\n```\n\n* @extends RedditContent\n*/\n\nvar LiveThread = class LiveThread extends _RedditContent.default {\n  constructor(options, _r, _hasFetched) {\n    var _this;\n\n    super(options, _r, _hasFetched);\n    _this = this;\n    this._rawStream = null;\n    this._populatedStream = null;\n\n    if (_hasFetched) {\n      Object.defineProperty(this, 'stream', {\n        get: function () {\n          if (!_this._populatedStream && _this.websocket_url) {\n            _this._setupWebSocket();\n          }\n\n          return _this._populatedStream;\n        }\n      });\n    }\n  }\n\n  get _uri() {\n    return \"live/\".concat(this.id, \"/about\");\n  }\n\n  _setupWebSocket() {\n    var _this2 = this;\n\n    this._rawStream = new WebSocket(this.websocket_url);\n    this._populatedStream = new _events.EventEmitter();\n\n    var handler = function (data) {\n      var parsed = _this2._r._populate(JSON.parse(data));\n\n      _this2._populatedStream.emit(parsed.type, parsed.payload);\n    };\n\n    if (typeof this._rawStream.on === 'function') {\n      this._rawStream.on('message', handler);\n    } else {\n      this._rawStream.onmessage = function (messageEvent) {\n        return handler(messageEvent.data);\n      };\n    }\n  }\n  /**\n  * @summary Adds a new update to this thread.\n  * @param {string} body The body of the new update\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').addUpdate('Breaking: Someone is reading the snoowrap documentation \\\\o/')\n  */\n\n\n  addUpdate(body) {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/update\"),\n      form: {\n        api_type,\n        body\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Strikes (marks incorrect and crosses out) the given update.\n  * @param {object} options\n  * @param {string} options.id The ID of the update that should be striked.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').strikeUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */\n\n\n  strikeUpdate(_ref) {\n    var id = _ref.id;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/strike_update\"),\n      form: {\n        api_type,\n        id: \"\".concat(id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_').concat(id)\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Deletes an update from this LiveThread.\n  * @param {object} options\n  * @param {string} options.id The ID of the LiveUpdate that should be deleted\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').deleteUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */\n\n\n  deleteUpdate(_ref2) {\n    var id = _ref2.id;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/delete_update\"),\n      form: {\n        api_type,\n        id: \"\".concat(id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_').concat(id)\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Gets a list of this LiveThread's contributors\n  * @returns {Promise} An Array containing RedditUsers\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getContributors().then(console.log)\n  * // => [\n  * //  RedditUser { permissions: ['edit'], name: 'not_an_aardvark', id: 't2_k83md' },\n  * //  RedditUser { permissions: ['all'], id: 't2_u3l80', name: 'snoowrap_testing' }\n  * // ]\n  */\n\n\n  getContributors() {\n    return this._get({\n      uri: \"live/\".concat(this.id, \"/contributors\")\n    }).then(function (contributors) {\n      return Array.isArray(contributors[0]) ? contributors[0] : contributors;\n    });\n  }\n  /**\n  * @summary Invites a contributor to this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The name of the user who should be invited\n  * @param {Array} options.permissions The permissions that the invited user should receive. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To invite a contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').inviteContributor({name: 'actually_an_aardvark', permissions: ['update']})\n  */\n\n\n  inviteContributor(_ref3) {\n    var name = _ref3.name,\n        permissions = _ref3.permissions;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/invite_contributor\"),\n      form: {\n        api_type,\n        name,\n        permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n        type: 'liveupdate_contributor_invite'\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Revokes an invitation for the given user to become a contributor on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account whose invitation should be revoked\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').revokeContributorInvite({name: 'actually_an_aardvark'});\n  */\n\n\n  revokeContributorInvite(_ref4) {\n    var _this3 = this;\n\n    var name = _ref4.name;\n    return this._r.getUser(name).fetch().get('id').then(function (userId) {\n      return _this3._post({\n        uri: \"api/live/\".concat(_this3.id, \"/rm_contributor_invite\"),\n        form: {\n          api_type,\n          id: \"t2_\".concat(userId)\n        }\n      });\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Accepts a pending contributor invitation on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').acceptContributorInvite()\n  */\n\n\n  acceptContributorInvite() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/accept_contributor_invite\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Abdicates contributor status on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').leaveContributor()\n  */\n\n\n  leaveContributor() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/leave_contributor\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes the given user from contributor status on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account who should be removed\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').removeContributor({name: 'actually_an_aardvark'})\n  */\n\n\n  removeContributor(_ref5) {\n    var _this4 = this;\n\n    var name = _ref5.name;\n    return this._r.getUser(name).fetch().get('id').then(function (userId) {\n      return _this4._post({\n        uri: \"api/live/\".concat(_this4.id, \"/rm_contributor\"),\n        form: {\n          api_type,\n          id: \"t2_\".concat(userId)\n        }\n      });\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Sets the permissions of the given contributor.\n  * @param {object} options\n  * @param {string} options.name The name of the user whose permissions should be changed\n  * @param {Array} options.permissions The updated permissions that the user should have. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To give the contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').setContributorPermissions({name: 'actually_an_aardvark', permissions: ['edit']})\n  */\n\n\n  setContributorPermissions(_ref6) {\n    var name = _ref6.name,\n        permissions = _ref6.permissions;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/set_contributor_permissions\"),\n      form: {\n        api_type,\n        name,\n        permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n        type: 'liveupdate_contributor'\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Edits the settings on this LiveThread.\n  * @param {object} options\n  * @param {string} options.title The title of the thread\n  * @param {string} [options.description] A descriptions of the thread. 120 characters max\n  * @param {string} [options.resources] Information and useful links related to the thread.\n  * @param {boolean} options.nsfw Determines whether the thread is Not Safe For Work\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').editSettings({title: 'My livethread', description: 'an updated description'})\n  */\n\n\n  editSettings(_ref7) {\n    var title = _ref7.title,\n        description = _ref7.description,\n        resources = _ref7.resources,\n        nsfw = _ref7.nsfw;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/edit\"),\n      form: {\n        api_type,\n        description,\n        nsfw,\n        resources,\n        title\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Permanently closes this thread, preventing any more updates from being added.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').closeThread()\n  */\n\n\n  closeThread() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/close_thread\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Reports this LiveThread for breaking reddit's rules.\n  * @param {object} options\n  * @param {string} options.reason The reason for the report. One of `spam`, `vote-manipulation`, `personal-information`,\n  `sexualizing-minors`, `site-breaking`\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').report({reason: 'Breaking a rule blah blah blah'})\n  */\n\n\n  report(_ref8) {\n    var reason = _ref8.reason;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/report\"),\n      form: {\n        api_type,\n        type: reason\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Gets a Listing containing past updates to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing LiveUpdates\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getRecentUpdates().then(console.log)\n  * // => Listing [\n  * //  LiveUpdate { ... },\n  * //  LiveUpdate { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getRecentUpdates(options) {\n    return this._getListing({\n      uri: \"live/\".concat(this.id),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a list of reddit submissions linking to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getDiscussions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getDiscussions(options) {\n    return this._getListing({\n      uri: \"live/\".concat(this.id, \"/discussions\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Stops listening for new updates on this LiveThread.\n  * @desc To avoid memory leaks that can result from open sockets, it's recommended that you call this method when you're\n  finished listening for updates on this LiveThread.\n  *\n  * This should not be confused with {@link LiveThread#closeThread}, which marks the thread as \"closed\" on reddit.\n  * @returns undefined\n  * @example\n  *\n  * var myThread = r.getLivethread('whrdxo8dg9n0');\n  * myThread.stream.on('update', content => {\n  *   console.log(content);\n  *   myThread.closeStream();\n  * })\n  *\n  */\n\n\n  closeStream() {\n    if (this._rawStream) {\n      this._rawStream.close();\n    }\n  }\n\n};\nvar _default = LiveThread;\nexports.default = _default;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/8. savedit/node_modules/snoowrap/dist/objects/LiveThread.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_helpers","_RedditContent","_interopRequireDefault","obj","__esModule","WebSocket","isBrowser","global","api_type","LiveThread","constructor","options","_r","_hasFetched","_this","_rawStream","_populatedStream","get","websocket_url","_setupWebSocket","_uri","concat","id","_this2","EventEmitter","handler","data","parsed","_populate","JSON","parse","emit","type","payload","on","onmessage","messageEvent","addUpdate","body","_post","uri","form","then","handleJsonErrors","strikeUpdate","_ref","startsWith","deleteUpdate","_ref2","getContributors","_get","contributors","Array","isArray","inviteContributor","_ref3","name","permissions","formatLivethreadPermissions","revokeContributorInvite","_ref4","_this3","getUser","fetch","userId","acceptContributorInvite","return","leaveContributor","removeContributor","_ref5","_this4","setContributorPermissions","_ref6","editSettings","_ref7","title","description","resources","nsfw","closeThread","report","_ref8","reason","getRecentUpdates","_getListing","qs","getDiscussions","closeStream","close","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar WebSocket = _helpers.isBrowser ? global.WebSocket : require('ws');\nvar api_type = 'json';\n/**\n* A class representing a live reddit thread\n* <style> #LiveThread {display: none} </style>\n* @example\n*\n* // Get a livethread with the given ID\n* r.getLivethread('whrdxo8dg9n0')\n* @desc For the most part, reddit distributes the content of live threads via websocket, rather than through the REST API.\nAs such, snoowrap assigns each fetched LiveThread object a `stream` property, which takes the form of an\n[EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter). To listen for new thread updates, simply\nadd listeners to that emitter.\n\nThe following events can be emitted:\n- `update`: Occurs when a new update has been posted in this thread. Emits a `LiveUpdate` object containing information\nabout the new update.\n- `activity`: Occurs periodically when the viewer count for this thread changes.\n- `settings`: Occurs when the thread's settings change. Emits an object containing the new settings.\n- `delete`: Occurs when an update has been deleted. Emits the ID of the deleted update.\n- `strike`: Occurs when an update has been striken (marked incorrect and crossed out). Emits the ID of the striken update.\n- `embeds_ready`: Occurs when embedded media is now available for a previously-posted update.\n- `complete`: Occurs when this LiveThread has been marked as complete, and no more updates will be sent.\n\n(Note: These event types are mapped directly from reddit's categorization of the updates. The descriptions above are\nparaphrased from reddit's descriptions [here](https://www.reddit.com/dev/api#section_live).)\n\nAs an example, this would log all new livethread updates to the console:\n\n```javascript\nsomeLivethread.stream.on('update', data => {\n  console.log(data.body);\n});\n```\n\n* @extends RedditContent\n*/\n\nvar LiveThread = class LiveThread extends _RedditContent.default {\n  constructor(options, _r, _hasFetched) {\n    var _this;\n\n    super(options, _r, _hasFetched);\n    _this = this;\n    this._rawStream = null;\n    this._populatedStream = null;\n\n    if (_hasFetched) {\n      Object.defineProperty(this, 'stream', {\n        get: function () {\n          if (!_this._populatedStream && _this.websocket_url) {\n            _this._setupWebSocket();\n          }\n\n          return _this._populatedStream;\n        }\n      });\n    }\n  }\n\n  get _uri() {\n    return \"live/\".concat(this.id, \"/about\");\n  }\n\n  _setupWebSocket() {\n    var _this2 = this;\n\n    this._rawStream = new WebSocket(this.websocket_url);\n    this._populatedStream = new _events.EventEmitter();\n\n    var handler = function (data) {\n      var parsed = _this2._r._populate(JSON.parse(data));\n\n      _this2._populatedStream.emit(parsed.type, parsed.payload);\n    };\n\n    if (typeof this._rawStream.on === 'function') {\n      this._rawStream.on('message', handler);\n    } else {\n      this._rawStream.onmessage = function (messageEvent) {\n        return handler(messageEvent.data);\n      };\n    }\n  }\n  /**\n  * @summary Adds a new update to this thread.\n  * @param {string} body The body of the new update\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').addUpdate('Breaking: Someone is reading the snoowrap documentation \\\\o/')\n  */\n\n\n  addUpdate(body) {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/update\"),\n      form: {\n        api_type,\n        body\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Strikes (marks incorrect and crosses out) the given update.\n  * @param {object} options\n  * @param {string} options.id The ID of the update that should be striked.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').strikeUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */\n\n\n  strikeUpdate(_ref) {\n    var id = _ref.id;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/strike_update\"),\n      form: {\n        api_type,\n        id: \"\".concat(id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_').concat(id)\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Deletes an update from this LiveThread.\n  * @param {object} options\n  * @param {string} options.id The ID of the LiveUpdate that should be deleted\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').deleteUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */\n\n\n  deleteUpdate(_ref2) {\n    var id = _ref2.id;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/delete_update\"),\n      form: {\n        api_type,\n        id: \"\".concat(id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_').concat(id)\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Gets a list of this LiveThread's contributors\n  * @returns {Promise} An Array containing RedditUsers\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getContributors().then(console.log)\n  * // => [\n  * //  RedditUser { permissions: ['edit'], name: 'not_an_aardvark', id: 't2_k83md' },\n  * //  RedditUser { permissions: ['all'], id: 't2_u3l80', name: 'snoowrap_testing' }\n  * // ]\n  */\n\n\n  getContributors() {\n    return this._get({\n      uri: \"live/\".concat(this.id, \"/contributors\")\n    }).then(function (contributors) {\n      return Array.isArray(contributors[0]) ? contributors[0] : contributors;\n    });\n  }\n  /**\n  * @summary Invites a contributor to this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The name of the user who should be invited\n  * @param {Array} options.permissions The permissions that the invited user should receive. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To invite a contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').inviteContributor({name: 'actually_an_aardvark', permissions: ['update']})\n  */\n\n\n  inviteContributor(_ref3) {\n    var name = _ref3.name,\n        permissions = _ref3.permissions;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/invite_contributor\"),\n      form: {\n        api_type,\n        name,\n        permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n        type: 'liveupdate_contributor_invite'\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Revokes an invitation for the given user to become a contributor on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account whose invitation should be revoked\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').revokeContributorInvite({name: 'actually_an_aardvark'});\n  */\n\n\n  revokeContributorInvite(_ref4) {\n    var _this3 = this;\n\n    var name = _ref4.name;\n    return this._r.getUser(name).fetch().get('id').then(function (userId) {\n      return _this3._post({\n        uri: \"api/live/\".concat(_this3.id, \"/rm_contributor_invite\"),\n        form: {\n          api_type,\n          id: \"t2_\".concat(userId)\n        }\n      });\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Accepts a pending contributor invitation on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').acceptContributorInvite()\n  */\n\n\n  acceptContributorInvite() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/accept_contributor_invite\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Abdicates contributor status on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').leaveContributor()\n  */\n\n\n  leaveContributor() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/leave_contributor\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes the given user from contributor status on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account who should be removed\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').removeContributor({name: 'actually_an_aardvark'})\n  */\n\n\n  removeContributor(_ref5) {\n    var _this4 = this;\n\n    var name = _ref5.name;\n    return this._r.getUser(name).fetch().get('id').then(function (userId) {\n      return _this4._post({\n        uri: \"api/live/\".concat(_this4.id, \"/rm_contributor\"),\n        form: {\n          api_type,\n          id: \"t2_\".concat(userId)\n        }\n      });\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Sets the permissions of the given contributor.\n  * @param {object} options\n  * @param {string} options.name The name of the user whose permissions should be changed\n  * @param {Array} options.permissions The updated permissions that the user should have. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To give the contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').setContributorPermissions({name: 'actually_an_aardvark', permissions: ['edit']})\n  */\n\n\n  setContributorPermissions(_ref6) {\n    var name = _ref6.name,\n        permissions = _ref6.permissions;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/set_contributor_permissions\"),\n      form: {\n        api_type,\n        name,\n        permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n        type: 'liveupdate_contributor'\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Edits the settings on this LiveThread.\n  * @param {object} options\n  * @param {string} options.title The title of the thread\n  * @param {string} [options.description] A descriptions of the thread. 120 characters max\n  * @param {string} [options.resources] Information and useful links related to the thread.\n  * @param {boolean} options.nsfw Determines whether the thread is Not Safe For Work\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').editSettings({title: 'My livethread', description: 'an updated description'})\n  */\n\n\n  editSettings(_ref7) {\n    var title = _ref7.title,\n        description = _ref7.description,\n        resources = _ref7.resources,\n        nsfw = _ref7.nsfw;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/edit\"),\n      form: {\n        api_type,\n        description,\n        nsfw,\n        resources,\n        title\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Permanently closes this thread, preventing any more updates from being added.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').closeThread()\n  */\n\n\n  closeThread() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/close_thread\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Reports this LiveThread for breaking reddit's rules.\n  * @param {object} options\n  * @param {string} options.reason The reason for the report. One of `spam`, `vote-manipulation`, `personal-information`,\n  `sexualizing-minors`, `site-breaking`\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').report({reason: 'Breaking a rule blah blah blah'})\n  */\n\n\n  report(_ref8) {\n    var reason = _ref8.reason;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/report\"),\n      form: {\n        api_type,\n        type: reason\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Gets a Listing containing past updates to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing LiveUpdates\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getRecentUpdates().then(console.log)\n  * // => Listing [\n  * //  LiveUpdate { ... },\n  * //  LiveUpdate { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getRecentUpdates(options) {\n    return this._getListing({\n      uri: \"live/\".concat(this.id),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a list of reddit submissions linking to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getDiscussions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getDiscussions(options) {\n    return this._getListing({\n      uri: \"live/\".concat(this.id, \"/discussions\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Stops listening for new updates on this LiveThread.\n  * @desc To avoid memory leaks that can result from open sockets, it's recommended that you call this method when you're\n  finished listening for updates on this LiveThread.\n  *\n  * This should not be confused with {@link LiveThread#closeThread}, which marks the thread as \"closed\" on reddit.\n  * @returns undefined\n  * @example\n  *\n  * var myThread = r.getLivethread('whrdxo8dg9n0');\n  * myThread.stream.on('update', content => {\n  *   console.log(content);\n  *   myThread.closeStream();\n  * })\n  *\n  */\n\n\n  closeStream() {\n    if (this._rawStream) {\n      this._rawStream.close();\n    }\n  }\n\n};\nvar _default = LiveThread;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}