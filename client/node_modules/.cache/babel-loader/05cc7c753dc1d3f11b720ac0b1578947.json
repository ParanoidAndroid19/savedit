{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.modActionStates = exports.conversationStates = void 0;\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * @global\n * @enum {number}\n * @readonly\n * @summary Represents the current status of a given Modmail conversation.\n * @type {Readonly<{New: number, InProgress: number, Archived: number}>}\n */\n\n\nvar conversationStates = Object.freeze({\n  New: 0,\n  InProgress: 1,\n  Archived: 2\n});\n/**\n * @global\n * @enum {number}\n * @readonly\n * @summary Represents all the possible states that is used within a Modmail conversations.\n * @type {Readonly<{UnArchive: number, Highlight: number, Archive: number, ReportedToAdmins: number, Mute: number, UnHighlight: number, Unmute: number}>}\n */\n\nexports.conversationStates = conversationStates;\nvar modActionStates = Object.freeze({\n  Highlight: 0,\n  UnHighlight: 1,\n  Archive: 2,\n  UnArchive: 3,\n  ReportedToAdmins: 4,\n  Mute: 5,\n  Unmute: 6\n});\n/**\n * @class\n * A class representing a conversation from new modmail\n * <style> #ModmailConversation {display: none} </style>\n * @name ModmailConversation\n * @example\n *\n * // Get a Modmail Conversation with a given ID\n * r.getNewModmailConversation('75hxt')\n * @extends RedditContent\n */\n\nexports.modActionStates = modActionStates;\nvar ModmailConversation = class ModmailConversation extends _RedditContent.default {\n  static get conversationStates() {\n    return conversationStates;\n  }\n\n  static get modActionStates() {\n    return modActionStates;\n  }\n\n  get _uri() {\n    return \"api/mod/conversations/\".concat(this.id, \"?markRead=false\");\n  }\n  /**\n   * @summary Converts relevant fields in the ModmailConversation to snoowrap models.\n   * @param response API Response\n   * @return {ModmailConversation}\n   * @private\n   */\n\n\n  _transformApiResponse(response) {\n    response.conversation.owner = this._r._newObject('Subreddit', {\n      id: response.conversation.owner.id,\n      display_name: response.conversation.owner.displayName\n    });\n    response.conversation.participant = this._r._newObject('ModmailConversationAuthor', response.user.name, true);\n\n    for (var author of response.conversation.authors) {\n      author = this._r._newObject('ModmailConversationAuthor', author, true);\n    }\n\n    var conversationObjects = ModmailConversation._getConversationObjects(response.conversation, response);\n\n    return this._r._newObject('ModmailConversation', _objectSpread({}, conversationObjects, {}, response.conversation), true);\n  }\n  /**\n   * @summary Maps objects to the ModmailConversation\n   * @param conversation The conversation to map objects to\n   * @param response API Response\n   * @return {object}\n   * @private\n   */\n\n\n  static _getConversationObjects(conversation, response) {\n    var conversationObjects = {};\n\n    for (var objId of conversation.objIds) {\n      if (!conversationObjects[objId.key]) {\n        conversationObjects[objId.key] = [];\n      }\n\n      conversationObjects[objId.key].push(response[objId.key][objId.id]);\n    }\n\n    return conversationObjects;\n  }\n  /**\n   * @summary Reply to current ModmailConversation\n   * @param {string} body Markdown text\n   * @param {boolean} isAuthorHidden Subreddit-name reply if true, user's name if false\n   * @param {boolean} isInternal If reply should be to internal moderators only\n   * @return {Promise}\n   */\n\n\n  reply(body) {\n    var isAuthorHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id),\n      form: {\n        body,\n        isAuthorHidden,\n        isInternal\n      }\n    });\n  }\n  /**\n   * @summary Archives the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').archive()\n   */\n\n\n  archive() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/archive\")\n    });\n  }\n  /**\n   * @summary Unarchives the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unarchive()\n   */\n\n\n  unarchive() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/unarchive\")\n    });\n  }\n  /**\n   * @summary Marks a ModmailConversation as highlighted\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').highlight()\n   */\n\n\n  highlight() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/highlight\")\n    });\n  }\n  /**\n   * @summary Removed highlighted from a ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unhighlight()\n   */\n\n\n  unhighlight() {\n    return this._delete({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/highlight\")\n    });\n  }\n  /**\n   * @summary Mute the participant of the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').mute()\n   */\n\n\n  mute() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/mute\")\n    });\n  }\n  /**\n   * @summary Unmute the participant of the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unmute()\n   */\n\n\n  unmute() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/unmute\")\n    });\n  }\n  /**\n   * @summary Marks the ModmailConversation as read\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').read()\n   */\n\n\n  read() {\n    return this._r.markNewModmailConversationsAsRead([this.id]);\n  }\n  /**\n   * @summary Marks the ModmailConversation as unread\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unread()\n   */\n\n\n  unread() {\n    return this._r.markNewModmailConversationsAsUnread([this.id]);\n  }\n  /**\n   * @summary Fetches the participant of the conversation\n   * @return {Promise<ModmailConversationAuthor>}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').getParticipant().then(console.log)\n   * // ModmailConversationAuthor { muteStatus: {...}, name: \"SpyTec13\", created: '2015-11-22T14:30:38.821292+00:00', ...}\n   */\n\n\n  getParticipant() {\n    var _this = this;\n\n    return this._get({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/user\")\n    }).then(function (res) {\n      return _this._r._newObject('ModmailConversationAuthor', res, true);\n    });\n  }\n  /**\n   * @summary Returns whether the ModmailConversation is read.\n   * @return {boolean} true, if read. false otherwise\n   */\n\n\n  isRead() {\n    return this.lastUnread === null;\n  }\n\n  get name() {\n    return this.id;\n  }\n\n};\nvar _default = ModmailConversation;\nexports.default = _default;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/8. savedit/node_modules/snoowrap/dist/objects/ModmailConversation.js"],"names":["Object","defineProperty","exports","value","default","modActionStates","conversationStates","_RedditContent","_interopRequireDefault","require","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","freeze","New","InProgress","Archived","Highlight","UnHighlight","Archive","UnArchive","ReportedToAdmins","Mute","Unmute","ModmailConversation","_uri","concat","id","_transformApiResponse","response","conversation","owner","_r","_newObject","display_name","displayName","participant","user","name","author","authors","conversationObjects","_getConversationObjects","objId","objIds","reply","body","isAuthorHidden","undefined","isInternal","_post","uri","form","archive","unarchive","highlight","unhighlight","_delete","mute","unmute","read","markNewModmailConversationsAsRead","unread","markNewModmailConversationsAsUnread","getParticipant","_this","_get","then","res","isRead","lastUnread","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,eAAR,GAA0BH,OAAO,CAACI,kBAAR,GAA6B,KAAK,CAA9E;;AAEA,IAAIC,cAAc,GAAGC,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAA3C;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,SAASE,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGf,MAAM,CAACe,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIb,MAAM,CAACgB,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGjB,MAAM,CAACgB,qBAAP,CAA6BH,MAA7B,CAAd;AAAoD,QAAIC,cAAJ,EAAoBG,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,aAAOnB,MAAM,CAACoB,wBAAP,CAAgCP,MAAhC,EAAwCM,GAAxC,EAA6CE,UAApD;AAAiE,KAAjG,CAAV;AAA8GN,IAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBE,OAAtB;AAAiC;;AAAC,SAAOF,IAAP;AAAc;;AAErV,SAASS,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEd,MAAAA,OAAO,CAACiB,MAAD,EAAS,IAAT,CAAP,CAAsBC,OAAtB,CAA8B,UAAUC,GAAV,EAAe;AAAEC,QAAAA,eAAe,CAACP,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,OAA3F;AAA+F,KAA5G,MAAkH,IAAI/B,MAAM,CAACiC,yBAAX,EAAsC;AAAEjC,MAAAA,MAAM,CAACkC,gBAAP,CAAwBT,MAAxB,EAAgCzB,MAAM,CAACiC,yBAAP,CAAiCJ,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAEjB,MAAAA,OAAO,CAACiB,MAAD,CAAP,CAAgBC,OAAhB,CAAwB,UAAUC,GAAV,EAAe;AAAE/B,QAAAA,MAAM,CAACC,cAAP,CAAsBwB,MAAtB,EAA8BM,GAA9B,EAAmC/B,MAAM,CAACoB,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAA5H;AAAgI;AAAE;;AAAC,SAAON,MAAP;AAAgB;;AAEtgB,SAASO,eAAT,CAAyBtB,GAAzB,EAA8BqB,GAA9B,EAAmC5B,KAAnC,EAA0C;AAAE,MAAI4B,GAAG,IAAIrB,GAAX,EAAgB;AAAEV,IAAAA,MAAM,CAACC,cAAP,CAAsBS,GAAtB,EAA2BqB,GAA3B,EAAgC;AAAE5B,MAAAA,KAAK,EAAEA,KAAT;AAAgBkB,MAAAA,UAAU,EAAE,IAA5B;AAAkCc,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAE1B,IAAAA,GAAG,CAACqB,GAAD,CAAH,GAAW5B,KAAX;AAAmB;;AAAC,SAAOO,GAAP;AAAa;AAEjN;;;;;;;;;AAOA,IAAIJ,kBAAkB,GAAGN,MAAM,CAACqC,MAAP,CAAc;AACrCC,EAAAA,GAAG,EAAE,CADgC;AAErCC,EAAAA,UAAU,EAAE,CAFyB;AAGrCC,EAAAA,QAAQ,EAAE;AAH2B,CAAd,CAAzB;AAKA;;;;;;;;AAQAtC,OAAO,CAACI,kBAAR,GAA6BA,kBAA7B;AACA,IAAID,eAAe,GAAGL,MAAM,CAACqC,MAAP,CAAc;AAClCI,EAAAA,SAAS,EAAE,CADuB;AAElCC,EAAAA,WAAW,EAAE,CAFqB;AAGlCC,EAAAA,OAAO,EAAE,CAHyB;AAIlCC,EAAAA,SAAS,EAAE,CAJuB;AAKlCC,EAAAA,gBAAgB,EAAE,CALgB;AAMlCC,EAAAA,IAAI,EAAE,CAN4B;AAOlCC,EAAAA,MAAM,EAAE;AAP0B,CAAd,CAAtB;AASA;;;;;;;;;;;;AAYA7C,OAAO,CAACG,eAAR,GAA0BA,eAA1B;AACA,IAAI2C,mBAAmB,GAAG,MAAMA,mBAAN,SAAkCzC,cAAc,CAACH,OAAjD,CAAyD;AACjF,aAAWE,kBAAX,GAAgC;AAC9B,WAAOA,kBAAP;AACD;;AAED,aAAWD,eAAX,GAA6B;AAC3B,WAAOA,eAAP;AACD;;AAED,MAAI4C,IAAJ,GAAW;AACT,WAAO,yBAAyBC,MAAzB,CAAgC,KAAKC,EAArC,EAAyC,iBAAzC,CAAP;AACD;AACD;;;;;;;;AAQAC,EAAAA,qBAAqB,CAACC,QAAD,EAAW;AAC9BA,IAAAA,QAAQ,CAACC,YAAT,CAAsBC,KAAtB,GAA8B,KAAKC,EAAL,CAAQC,UAAR,CAAmB,WAAnB,EAAgC;AAC5DN,MAAAA,EAAE,EAAEE,QAAQ,CAACC,YAAT,CAAsBC,KAAtB,CAA4BJ,EAD4B;AAE5DO,MAAAA,YAAY,EAAEL,QAAQ,CAACC,YAAT,CAAsBC,KAAtB,CAA4BI;AAFkB,KAAhC,CAA9B;AAIAN,IAAAA,QAAQ,CAACC,YAAT,CAAsBM,WAAtB,GAAoC,KAAKJ,EAAL,CAAQC,UAAR,CAAmB,2BAAnB,EAAgDJ,QAAQ,CAACQ,IAAT,CAAcC,IAA9D,EAAoE,IAApE,CAApC;;AAEA,SAAK,IAAIC,MAAT,IAAmBV,QAAQ,CAACC,YAAT,CAAsBU,OAAzC,EAAkD;AAChDD,MAAAA,MAAM,GAAG,KAAKP,EAAL,CAAQC,UAAR,CAAmB,2BAAnB,EAAgDM,MAAhD,EAAwD,IAAxD,CAAT;AACD;;AAED,QAAIE,mBAAmB,GAAGjB,mBAAmB,CAACkB,uBAApB,CAA4Cb,QAAQ,CAACC,YAArD,EAAmED,QAAnE,CAA1B;;AAEA,WAAO,KAAKG,EAAL,CAAQC,UAAR,CAAmB,qBAAnB,EAA0CjC,aAAa,CAAC,EAAD,EAAKyC,mBAAL,EAA0B,EAA1B,EAA8BZ,QAAQ,CAACC,YAAvC,CAAvD,EAA6G,IAA7G,CAAP;AACD;AACD;;;;;;;;;AASA,SAAOY,uBAAP,CAA+BZ,YAA/B,EAA6CD,QAA7C,EAAuD;AACrD,QAAIY,mBAAmB,GAAG,EAA1B;;AAEA,SAAK,IAAIE,KAAT,IAAkBb,YAAY,CAACc,MAA/B,EAAuC;AACrC,UAAI,CAACH,mBAAmB,CAACE,KAAK,CAACpC,GAAP,CAAxB,EAAqC;AACnCkC,QAAAA,mBAAmB,CAACE,KAAK,CAACpC,GAAP,CAAnB,GAAiC,EAAjC;AACD;;AAEDkC,MAAAA,mBAAmB,CAACE,KAAK,CAACpC,GAAP,CAAnB,CAA+BT,IAA/B,CAAoC+B,QAAQ,CAACc,KAAK,CAACpC,GAAP,CAAR,CAAoBoC,KAAK,CAAChB,EAA1B,CAApC;AACD;;AAED,WAAOc,mBAAP;AACD;AACD;;;;;;;;;AASAI,EAAAA,KAAK,CAACC,IAAD,EAAO;AACV,QAAIC,cAAc,GAAG5C,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiB6C,SAAzC,GAAqD7C,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAzF;AACA,QAAI8C,UAAU,GAAG9C,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiB6C,SAAzC,GAAqD7C,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAArF;AACA,WAAO,KAAK+C,KAAL,CAAW;AAChBC,MAAAA,GAAG,EAAE,yBAAyBzB,MAAzB,CAAgC,KAAKC,EAArC,CADW;AAEhByB,MAAAA,IAAI,EAAE;AACJN,QAAAA,IADI;AAEJC,QAAAA,cAFI;AAGJE,QAAAA;AAHI;AAFU,KAAX,CAAP;AAQD;AACD;;;;;;;;;AASAI,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKH,KAAL,CAAW;AAChBC,MAAAA,GAAG,EAAE,yBAAyBzB,MAAzB,CAAgC,KAAKC,EAArC,EAAyC,UAAzC;AADW,KAAX,CAAP;AAGD;AACD;;;;;;;;;AASA2B,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKJ,KAAL,CAAW;AAChBC,MAAAA,GAAG,EAAE,yBAAyBzB,MAAzB,CAAgC,KAAKC,EAArC,EAAyC,YAAzC;AADW,KAAX,CAAP;AAGD;AACD;;;;;;;;;AASA4B,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKL,KAAL,CAAW;AAChBC,MAAAA,GAAG,EAAE,yBAAyBzB,MAAzB,CAAgC,KAAKC,EAArC,EAAyC,YAAzC;AADW,KAAX,CAAP;AAGD;AACD;;;;;;;;;AASA6B,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKC,OAAL,CAAa;AAClBN,MAAAA,GAAG,EAAE,yBAAyBzB,MAAzB,CAAgC,KAAKC,EAArC,EAAyC,YAAzC;AADa,KAAb,CAAP;AAGD;AACD;;;;;;;;;AASA+B,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKR,KAAL,CAAW;AAChBC,MAAAA,GAAG,EAAE,yBAAyBzB,MAAzB,CAAgC,KAAKC,EAArC,EAAyC,OAAzC;AADW,KAAX,CAAP;AAGD;AACD;;;;;;;;;AASAgC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKT,KAAL,CAAW;AAChBC,MAAAA,GAAG,EAAE,yBAAyBzB,MAAzB,CAAgC,KAAKC,EAArC,EAAyC,SAAzC;AADW,KAAX,CAAP;AAGD;AACD;;;;;;;;;AASAiC,EAAAA,IAAI,GAAG;AACL,WAAO,KAAK5B,EAAL,CAAQ6B,iCAAR,CAA0C,CAAC,KAAKlC,EAAN,CAA1C,CAAP;AACD;AACD;;;;;;;;;AASAmC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAK9B,EAAL,CAAQ+B,mCAAR,CAA4C,CAAC,KAAKpC,EAAN,CAA5C,CAAP;AACD;AACD;;;;;;;;;;AAUAqC,EAAAA,cAAc,GAAG;AACf,QAAIC,KAAK,GAAG,IAAZ;;AAEA,WAAO,KAAKC,IAAL,CAAU;AACff,MAAAA,GAAG,EAAE,yBAAyBzB,MAAzB,CAAgC,KAAKC,EAArC,EAAyC,OAAzC;AADU,KAAV,EAEJwC,IAFI,CAEC,UAAUC,GAAV,EAAe;AACrB,aAAOH,KAAK,CAACjC,EAAN,CAASC,UAAT,CAAoB,2BAApB,EAAiDmC,GAAjD,EAAsD,IAAtD,CAAP;AACD,KAJM,CAAP;AAKD;AACD;;;;;;AAMAC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKC,UAAL,KAAoB,IAA3B;AACD;;AAED,MAAIhC,IAAJ,GAAW;AACT,WAAO,KAAKX,EAAZ;AACD;;AAzNgF,CAAnF;AA4NA,IAAI4C,QAAQ,GAAG/C,mBAAf;AACA9C,OAAO,CAACE,OAAR,GAAkB2F,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.modActionStates = exports.conversationStates = void 0;\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @global\n * @enum {number}\n * @readonly\n * @summary Represents the current status of a given Modmail conversation.\n * @type {Readonly<{New: number, InProgress: number, Archived: number}>}\n */\nvar conversationStates = Object.freeze({\n  New: 0,\n  InProgress: 1,\n  Archived: 2\n});\n/**\n * @global\n * @enum {number}\n * @readonly\n * @summary Represents all the possible states that is used within a Modmail conversations.\n * @type {Readonly<{UnArchive: number, Highlight: number, Archive: number, ReportedToAdmins: number, Mute: number, UnHighlight: number, Unmute: number}>}\n */\n\nexports.conversationStates = conversationStates;\nvar modActionStates = Object.freeze({\n  Highlight: 0,\n  UnHighlight: 1,\n  Archive: 2,\n  UnArchive: 3,\n  ReportedToAdmins: 4,\n  Mute: 5,\n  Unmute: 6\n});\n/**\n * @class\n * A class representing a conversation from new modmail\n * <style> #ModmailConversation {display: none} </style>\n * @name ModmailConversation\n * @example\n *\n * // Get a Modmail Conversation with a given ID\n * r.getNewModmailConversation('75hxt')\n * @extends RedditContent\n */\n\nexports.modActionStates = modActionStates;\nvar ModmailConversation = class ModmailConversation extends _RedditContent.default {\n  static get conversationStates() {\n    return conversationStates;\n  }\n\n  static get modActionStates() {\n    return modActionStates;\n  }\n\n  get _uri() {\n    return \"api/mod/conversations/\".concat(this.id, \"?markRead=false\");\n  }\n  /**\n   * @summary Converts relevant fields in the ModmailConversation to snoowrap models.\n   * @param response API Response\n   * @return {ModmailConversation}\n   * @private\n   */\n\n\n  _transformApiResponse(response) {\n    response.conversation.owner = this._r._newObject('Subreddit', {\n      id: response.conversation.owner.id,\n      display_name: response.conversation.owner.displayName\n    });\n    response.conversation.participant = this._r._newObject('ModmailConversationAuthor', response.user.name, true);\n\n    for (var author of response.conversation.authors) {\n      author = this._r._newObject('ModmailConversationAuthor', author, true);\n    }\n\n    var conversationObjects = ModmailConversation._getConversationObjects(response.conversation, response);\n\n    return this._r._newObject('ModmailConversation', _objectSpread({}, conversationObjects, {}, response.conversation), true);\n  }\n  /**\n   * @summary Maps objects to the ModmailConversation\n   * @param conversation The conversation to map objects to\n   * @param response API Response\n   * @return {object}\n   * @private\n   */\n\n\n  static _getConversationObjects(conversation, response) {\n    var conversationObjects = {};\n\n    for (var objId of conversation.objIds) {\n      if (!conversationObjects[objId.key]) {\n        conversationObjects[objId.key] = [];\n      }\n\n      conversationObjects[objId.key].push(response[objId.key][objId.id]);\n    }\n\n    return conversationObjects;\n  }\n  /**\n   * @summary Reply to current ModmailConversation\n   * @param {string} body Markdown text\n   * @param {boolean} isAuthorHidden Subreddit-name reply if true, user's name if false\n   * @param {boolean} isInternal If reply should be to internal moderators only\n   * @return {Promise}\n   */\n\n\n  reply(body) {\n    var isAuthorHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id),\n      form: {\n        body,\n        isAuthorHidden,\n        isInternal\n      }\n    });\n  }\n  /**\n   * @summary Archives the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').archive()\n   */\n\n\n  archive() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/archive\")\n    });\n  }\n  /**\n   * @summary Unarchives the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unarchive()\n   */\n\n\n  unarchive() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/unarchive\")\n    });\n  }\n  /**\n   * @summary Marks a ModmailConversation as highlighted\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').highlight()\n   */\n\n\n  highlight() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/highlight\")\n    });\n  }\n  /**\n   * @summary Removed highlighted from a ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unhighlight()\n   */\n\n\n  unhighlight() {\n    return this._delete({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/highlight\")\n    });\n  }\n  /**\n   * @summary Mute the participant of the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').mute()\n   */\n\n\n  mute() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/mute\")\n    });\n  }\n  /**\n   * @summary Unmute the participant of the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unmute()\n   */\n\n\n  unmute() {\n    return this._post({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/unmute\")\n    });\n  }\n  /**\n   * @summary Marks the ModmailConversation as read\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').read()\n   */\n\n\n  read() {\n    return this._r.markNewModmailConversationsAsRead([this.id]);\n  }\n  /**\n   * @summary Marks the ModmailConversation as unread\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unread()\n   */\n\n\n  unread() {\n    return this._r.markNewModmailConversationsAsUnread([this.id]);\n  }\n  /**\n   * @summary Fetches the participant of the conversation\n   * @return {Promise<ModmailConversationAuthor>}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').getParticipant().then(console.log)\n   * // ModmailConversationAuthor { muteStatus: {...}, name: \"SpyTec13\", created: '2015-11-22T14:30:38.821292+00:00', ...}\n   */\n\n\n  getParticipant() {\n    var _this = this;\n\n    return this._get({\n      uri: \"api/mod/conversations/\".concat(this.id, \"/user\")\n    }).then(function (res) {\n      return _this._r._newObject('ModmailConversationAuthor', res, true);\n    });\n  }\n  /**\n   * @summary Returns whether the ModmailConversation is read.\n   * @return {boolean} true, if read. false otherwise\n   */\n\n\n  isRead() {\n    return this.lastUnread === null;\n  }\n\n  get name() {\n    return this.id;\n  }\n\n};\nvar _default = ModmailConversation;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}