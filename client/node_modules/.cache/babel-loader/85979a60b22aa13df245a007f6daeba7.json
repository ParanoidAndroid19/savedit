{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.emptyChildren = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _Promise = _interopRequireDefault(require(\"../Promise.js\"));\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _constants = require(\"../constants.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar api_type = 'json';\n/**\n* The `More` class is a helper representing reddit's exposed `more` type in comment threads, used to fetch additional comments\non a thread.\n* No instances of the `More` class are exposed externally by snoowrap; instead, comment lists are exposed as Listings.\nAdditional replies on an item can be fetched by calling `fetchMore` on a Listing, in the same manner as what would be done\nwith a Listing of posts. snoowrap should handle the differences internally, and expose a nearly-identical interface for the\ntwo use-cases.\n\nCombining reddit's `Listing` and `more` objects has the advantage of having a more consistent exposed interface; for example,\nif a consumer iterates over the comments on a Submission, all of the iterated items will actually be Comment objects, so the\nconsumer won't encounter an unexpected `more` object at the end. However, there are a few disadvantages, namely that (a) this\nleads to an increase in internal complexity, and (b) there are a few cases where reddit's `more` objects have different amounts\nof available information (e.g. all the child IDs of a `more` object are known on creation), which leads to different optimal\nbehavior.\n*/\n\nvar More = class More {\n  constructor(options, _r) {\n    Object.assign(this, options);\n    this._r = _r;\n  }\n  /* Requests to /api/morechildren are capped at 20 comments at a time, but requests to /api/info are capped at 100, so\n  it's easier to send to the latter. The disadvantage is that comment replies are not automatically sent from requests\n  to /api/info. */\n\n\n  fetchMore(options) {\n    var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (options.amount <= 0 || startIndex >= this.children.length) {\n      return _Promise.default.resolve([]);\n    }\n\n    if (!options.skipReplies) {\n      return this.fetchTree(options, startIndex);\n    }\n\n    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_INFO_AMOUNT).map(function (id) {\n      return \"t1_\".concat(id);\n    }); // Requests are capped at 100 comments. Send lots of requests recursively to get the comments, then concatenate them.\n    // (This speed-requesting is only possible with comment Listings since the entire list of ids is present initially.)\n\n    var promiseForThisBatch = this._r._getListing({\n      uri: 'api/info',\n      qs: {\n        id: ids.join(',')\n      }\n    });\n\n    var nextRequestOptions = _objectSpread({}, options, {\n      amount: options.amount - ids.length\n    });\n\n    var promiseForRemainingItems = this.fetchMore(nextRequestOptions, startIndex + ids.length);\n    return _Promise.default.all([promiseForThisBatch, promiseForRemainingItems]).then(_lodash.flatten);\n  }\n\n  fetchTree(options, startIndex) {\n    var _this = this;\n\n    if (options.amount <= 0 || startIndex >= this.children.length) {\n      return _Promise.default.resolve([]);\n    }\n\n    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_MORECHILDREN_AMOUNT);\n    return this._r._get({\n      uri: 'api/morechildren',\n      qs: {\n        api_type,\n        children: ids.join(','),\n        link_id: this.link_id || this.parent_id\n      }\n    }).tap(_helpers.handleJsonErrors).then(function (res) {\n      return res.json.data.things;\n    }).map(_helpers.addEmptyRepliesListing).then(_helpers.buildRepliesTree).then(function (resultTrees) {\n      /* Sometimes, when sending a request to reddit to get multiple comments from a `more` object, reddit decides to only\n      send some of the requested comments, and then stub out the remaining ones in a smaller `more` object. ( ¯\\_(ツ)_/¯ )\n      In these cases, recursively fetch the smaller `more` objects as well. */\n      var childMores = (0, _lodash.remove)(resultTrees, function (c) {\n        return c instanceof More;\n      });\n      (0, _lodash.forEach)(childMores, function (c) {\n        c.link_id = _this.link_id || _this.parent_id;\n      });\n      return _Promise.default.mapSeries(childMores, function (c) {\n        return c.fetchTree(_objectSpread({}, options, {\n          amount: Infinity\n        }), 0);\n      }).then(function (expandedTrees) {\n        return _this.fetchMore(_objectSpread({}, options, {\n          amount: options.amount - ids.length\n        }), startIndex + ids.length).then(function (nexts) {\n          return (0, _lodash.concat)(resultTrees, (0, _lodash.flatten)(expandedTrees), nexts);\n        });\n      });\n    });\n  }\n\n  _clone() {\n    return new More((0, _lodash.pick)(this, Object.getOwnPropertyNames(this)), this._r);\n  }\n\n};\n\nfunction getNextIdSlice(children, startIndex, desiredAmount, limit) {\n  return children.slice(startIndex, startIndex + Math.min(desiredAmount, limit));\n}\n\nvar emptyChildren = new More({\n  children: []\n});\nexports.emptyChildren = emptyChildren;\nvar _default = More;\nexports.default = _default;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/8. savedit/client/node_modules/snoowrap/dist/objects/More.js"],"names":["Object","defineProperty","exports","value","default","emptyChildren","_lodash","require","_Promise","_interopRequireDefault","_helpers","_constants","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","api_type","More","constructor","options","_r","assign","fetchMore","startIndex","undefined","amount","children","resolve","skipReplies","fetchTree","ids","getNextIdSlice","MAX_API_INFO_AMOUNT","map","id","concat","promiseForThisBatch","_getListing","uri","qs","join","nextRequestOptions","promiseForRemainingItems","all","then","flatten","_this","MAX_API_MORECHILDREN_AMOUNT","_get","link_id","parent_id","tap","handleJsonErrors","res","json","data","things","addEmptyRepliesListing","buildRepliesTree","resultTrees","childMores","remove","c","mapSeries","Infinity","expandedTrees","nexts","_clone","pick","getOwnPropertyNames","desiredAmount","limit","slice","Math","min","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.emptyChildren = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _Promise = _interopRequireDefault(require(\"../Promise.js\"));\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _constants = require(\"../constants.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar api_type = 'json';\n/**\n* The `More` class is a helper representing reddit's exposed `more` type in comment threads, used to fetch additional comments\non a thread.\n* No instances of the `More` class are exposed externally by snoowrap; instead, comment lists are exposed as Listings.\nAdditional replies on an item can be fetched by calling `fetchMore` on a Listing, in the same manner as what would be done\nwith a Listing of posts. snoowrap should handle the differences internally, and expose a nearly-identical interface for the\ntwo use-cases.\n\nCombining reddit's `Listing` and `more` objects has the advantage of having a more consistent exposed interface; for example,\nif a consumer iterates over the comments on a Submission, all of the iterated items will actually be Comment objects, so the\nconsumer won't encounter an unexpected `more` object at the end. However, there are a few disadvantages, namely that (a) this\nleads to an increase in internal complexity, and (b) there are a few cases where reddit's `more` objects have different amounts\nof available information (e.g. all the child IDs of a `more` object are known on creation), which leads to different optimal\nbehavior.\n*/\n\nvar More = class More {\n  constructor(options, _r) {\n    Object.assign(this, options);\n    this._r = _r;\n  }\n  /* Requests to /api/morechildren are capped at 20 comments at a time, but requests to /api/info are capped at 100, so\n  it's easier to send to the latter. The disadvantage is that comment replies are not automatically sent from requests\n  to /api/info. */\n\n\n  fetchMore(options) {\n    var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (options.amount <= 0 || startIndex >= this.children.length) {\n      return _Promise.default.resolve([]);\n    }\n\n    if (!options.skipReplies) {\n      return this.fetchTree(options, startIndex);\n    }\n\n    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_INFO_AMOUNT).map(function (id) {\n      return \"t1_\".concat(id);\n    }); // Requests are capped at 100 comments. Send lots of requests recursively to get the comments, then concatenate them.\n    // (This speed-requesting is only possible with comment Listings since the entire list of ids is present initially.)\n\n    var promiseForThisBatch = this._r._getListing({\n      uri: 'api/info',\n      qs: {\n        id: ids.join(',')\n      }\n    });\n\n    var nextRequestOptions = _objectSpread({}, options, {\n      amount: options.amount - ids.length\n    });\n\n    var promiseForRemainingItems = this.fetchMore(nextRequestOptions, startIndex + ids.length);\n    return _Promise.default.all([promiseForThisBatch, promiseForRemainingItems]).then(_lodash.flatten);\n  }\n\n  fetchTree(options, startIndex) {\n    var _this = this;\n\n    if (options.amount <= 0 || startIndex >= this.children.length) {\n      return _Promise.default.resolve([]);\n    }\n\n    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_MORECHILDREN_AMOUNT);\n    return this._r._get({\n      uri: 'api/morechildren',\n      qs: {\n        api_type,\n        children: ids.join(','),\n        link_id: this.link_id || this.parent_id\n      }\n    }).tap(_helpers.handleJsonErrors).then(function (res) {\n      return res.json.data.things;\n    }).map(_helpers.addEmptyRepliesListing).then(_helpers.buildRepliesTree).then(function (resultTrees) {\n      /* Sometimes, when sending a request to reddit to get multiple comments from a `more` object, reddit decides to only\n      send some of the requested comments, and then stub out the remaining ones in a smaller `more` object. ( ¯\\_(ツ)_/¯ )\n      In these cases, recursively fetch the smaller `more` objects as well. */\n      var childMores = (0, _lodash.remove)(resultTrees, function (c) {\n        return c instanceof More;\n      });\n      (0, _lodash.forEach)(childMores, function (c) {\n        c.link_id = _this.link_id || _this.parent_id;\n      });\n      return _Promise.default.mapSeries(childMores, function (c) {\n        return c.fetchTree(_objectSpread({}, options, {\n          amount: Infinity\n        }), 0);\n      }).then(function (expandedTrees) {\n        return _this.fetchMore(_objectSpread({}, options, {\n          amount: options.amount - ids.length\n        }), startIndex + ids.length).then(function (nexts) {\n          return (0, _lodash.concat)(resultTrees, (0, _lodash.flatten)(expandedTrees), nexts);\n        });\n      });\n    });\n  }\n\n  _clone() {\n    return new More((0, _lodash.pick)(this, Object.getOwnPropertyNames(this)), this._r);\n  }\n\n};\n\nfunction getNextIdSlice(children, startIndex, desiredAmount, limit) {\n  return children.slice(startIndex, startIndex + Math.min(desiredAmount, limit));\n}\n\nvar emptyChildren = new More({\n  children: []\n});\nexports.emptyChildren = emptyChildren;\nvar _default = More;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}