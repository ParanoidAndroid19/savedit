{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* @summary A class representing a multireddit.\n* <style> #MultiReddit {display: none} </style>\n* @example\n*\n* // Get a multireddit belonging to a specific user\n* r.getUser('multi-mod').getMultireddit('coding_languages')\n*/\n\n\nvar MultiReddit = class MultiReddit extends _RedditContent.default {\n  constructor(options, _r, _hasFetched) {\n    var _this;\n\n    super(options, _r, _hasFetched);\n    _this = this;\n\n    if (_hasFetched) {\n      this.curator = _r.getUser(this.path.split('/')[2]);\n      this.subreddits = this.subreddits.map(function (item) {\n        return _this._r._newObject('Subreddit', item.data || {\n          display_name: item.name\n        });\n      });\n    }\n  }\n\n  get _uri() {\n    return \"api/multi\".concat(this._path, \"?expand_srs=true\");\n  }\n\n  get _path() {\n    return \"/user/\".concat(this.curator.name, \"/m/\").concat(this.name);\n  }\n  /**\n  * @summary Copies this multireddit to the requester's own account.\n  * @param {object} options\n  * @param {string} options.newName The new name for the copied multireddit\n  * @returns {Promise} A Promise for the newly-copied multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'my_coding_languages_copy'})\n  */\n\n\n  copy(_ref) {\n    var _this2 = this;\n\n    var new_name = _ref.new_name,\n        _ref$newName = _ref.newName,\n        newName = _ref$newName === void 0 ? new_name : _ref$newName;\n    return this._r._getMyName().then(function (name) {\n      return _this2._post({\n        uri: 'api/multi/copy',\n        form: {\n          from: _this2._path,\n          to: \"/user/\".concat(name, \"/m/\").concat(newName),\n          display_name: newName\n        }\n      });\n    });\n  }\n  /**\n  * @summary Renames this multireddit.\n  * @desc **Note**: This method mutates this MultiReddit.\n  * @param {object} options\n  * @param {string} options.newName The new name for this multireddit.\n  * @returns {Promise} A Promise that fulfills with this multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'cookie_languages '})\n  * @deprecated Reddit no longer provides the corresponding API endpoint. Please use `edit()` with a new name.\n  */\n\n\n  rename(_ref2) {\n    var _this3 = this;\n\n    var new_name = _ref2.new_name,\n        _ref2$newName = _ref2.newName,\n        newName = _ref2$newName === void 0 ? new_name : _ref2$newName;\n    return this._r._getMyName().then(function (name) {\n      return _this3._post({\n        uri: 'api/multi/rename',\n        form: {\n          from: _this3._path,\n          to: \"/user/\".concat(name, \"/m/\").concat(newName),\n          display_name: newName\n        }\n      });\n    }).then(function (res) {\n      _this3.name = res.name;\n    }).return(this);\n  }\n  /**\n  * @summary Edits the properties of this multireddit.\n  * @desc **Note**: Any omitted properties here will simply retain their previous values.\n  * @param {object} options\n  * @param {string} [options.name] The name of the new multireddit. 50 characters max.\n  * @param {string} [options.description] A description for the new multireddit, in markdown.\n  * @param {string} [options.visibility] The multireddit's visibility setting. One of `private`, `public`, `hidden`.\n  * @param {string} [options.icon_name] One of `art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`,\n  `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`,\n  `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`,\n  `unusual stories`, `video`, `None`\n  * @param {string} [options.key_color] A six-digit RGB hex color, preceded by '#'\n  * @param {string} [options.weighting_scheme] One of 'classic', 'fresh'\n  * @returns {Promise} The updated version of this multireddit\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').edit({visibility: 'hidden'})\n  */\n\n\n  edit(_ref3) {\n    var _ref3$name = _ref3.name,\n        name = _ref3$name === void 0 ? '' : _ref3$name,\n        description = _ref3.description,\n        icon_name = _ref3.icon_name,\n        key_color = _ref3.key_color,\n        visibility = _ref3.visibility,\n        weighting_scheme = _ref3.weighting_scheme;\n    var display_name = name.length ? name : this.name;\n    return this._put({\n      uri: \"api/multi\".concat(this._path),\n      form: {\n        model: JSON.stringify({\n          description_md: description,\n          display_name,\n          icon_name,\n          key_color,\n          visibility,\n          weighting_scheme\n        })\n      }\n    });\n  }\n  /**\n  * @summary Adds a subreddit to this multireddit.\n  * @param {Subreddit} sub The Subreddit object to add (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the reuqest is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').addSubreddit('cookies')\n  */\n\n\n  addSubreddit(sub) {\n    sub = typeof sub === 'string' ? sub : sub.display_name;\n    return this._put({\n      uri: \"api/multi\".concat(this._path, \"/r/\").concat(sub),\n      form: {\n        model: JSON.stringify({\n          name: sub\n        })\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes a subreddit from this multireddit.\n  * @param {Subreddit} sub The Subreddit object to remove (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the request is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').removeSubreddit('cookies')\n  */\n\n\n  removeSubreddit(sub) {\n    return this._delete({\n      uri: \"api/multi\".concat(this._path, \"/r/\").concat(typeof sub === 'string' ? sub : sub.display_name)\n    }).return(this);\n  }\n  /* Note: The endpoints GET/PUT /api/multi/multipath/description and GET /api/multi/multipath/r/srname are intentionally not\n  included, because they're redundant and the same thing can be achieved by simply using fetch() and edit(). */\n\n\n}; // MultiReddit#delete is not in the class body since Safari 9 can't parse the `delete` function name in class bodies.\n\n/**\n* @function\n* @name delete\n* @summary Deletes this multireddit.\n* @returns {Promise} A Promise that fulfills when this request is complete\n* @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').delete()\n* @memberof MultiReddit\n* @instance\n*/\n\nObject.defineProperty(MultiReddit.prototype, 'delete', {\n  value() {\n    return this._delete({\n      uri: \"api/multi\".concat(this._path)\n    });\n  },\n\n  configurable: true,\n  writable: true\n});\nvar _default = MultiReddit;\nexports.default = _default;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/8. savedit/node_modules/snoowrap/dist/objects/MultiReddit.js"],"names":["Object","defineProperty","exports","value","default","_RedditContent","_interopRequireDefault","require","obj","__esModule","MultiReddit","constructor","options","_r","_hasFetched","_this","curator","getUser","path","split","subreddits","map","item","_newObject","data","display_name","name","_uri","concat","_path","copy","_ref","_this2","new_name","_ref$newName","newName","_getMyName","then","_post","uri","form","from","to","rename","_ref2","_this3","_ref2$newName","res","return","edit","_ref3","_ref3$name","description","icon_name","key_color","visibility","weighting_scheme","length","_put","model","JSON","stringify","description_md","addSubreddit","sub","removeSubreddit","_delete","prototype","configurable","writable","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* @summary A class representing a multireddit.\n* <style> #MultiReddit {display: none} </style>\n* @example\n*\n* // Get a multireddit belonging to a specific user\n* r.getUser('multi-mod').getMultireddit('coding_languages')\n*/\nvar MultiReddit = class MultiReddit extends _RedditContent.default {\n  constructor(options, _r, _hasFetched) {\n    var _this;\n\n    super(options, _r, _hasFetched);\n    _this = this;\n\n    if (_hasFetched) {\n      this.curator = _r.getUser(this.path.split('/')[2]);\n      this.subreddits = this.subreddits.map(function (item) {\n        return _this._r._newObject('Subreddit', item.data || {\n          display_name: item.name\n        });\n      });\n    }\n  }\n\n  get _uri() {\n    return \"api/multi\".concat(this._path, \"?expand_srs=true\");\n  }\n\n  get _path() {\n    return \"/user/\".concat(this.curator.name, \"/m/\").concat(this.name);\n  }\n  /**\n  * @summary Copies this multireddit to the requester's own account.\n  * @param {object} options\n  * @param {string} options.newName The new name for the copied multireddit\n  * @returns {Promise} A Promise for the newly-copied multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'my_coding_languages_copy'})\n  */\n\n\n  copy(_ref) {\n    var _this2 = this;\n\n    var new_name = _ref.new_name,\n        _ref$newName = _ref.newName,\n        newName = _ref$newName === void 0 ? new_name : _ref$newName;\n    return this._r._getMyName().then(function (name) {\n      return _this2._post({\n        uri: 'api/multi/copy',\n        form: {\n          from: _this2._path,\n          to: \"/user/\".concat(name, \"/m/\").concat(newName),\n          display_name: newName\n        }\n      });\n    });\n  }\n  /**\n  * @summary Renames this multireddit.\n  * @desc **Note**: This method mutates this MultiReddit.\n  * @param {object} options\n  * @param {string} options.newName The new name for this multireddit.\n  * @returns {Promise} A Promise that fulfills with this multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'cookie_languages '})\n  * @deprecated Reddit no longer provides the corresponding API endpoint. Please use `edit()` with a new name.\n  */\n\n\n  rename(_ref2) {\n    var _this3 = this;\n\n    var new_name = _ref2.new_name,\n        _ref2$newName = _ref2.newName,\n        newName = _ref2$newName === void 0 ? new_name : _ref2$newName;\n    return this._r._getMyName().then(function (name) {\n      return _this3._post({\n        uri: 'api/multi/rename',\n        form: {\n          from: _this3._path,\n          to: \"/user/\".concat(name, \"/m/\").concat(newName),\n          display_name: newName\n        }\n      });\n    }).then(function (res) {\n      _this3.name = res.name;\n    }).return(this);\n  }\n  /**\n  * @summary Edits the properties of this multireddit.\n  * @desc **Note**: Any omitted properties here will simply retain their previous values.\n  * @param {object} options\n  * @param {string} [options.name] The name of the new multireddit. 50 characters max.\n  * @param {string} [options.description] A description for the new multireddit, in markdown.\n  * @param {string} [options.visibility] The multireddit's visibility setting. One of `private`, `public`, `hidden`.\n  * @param {string} [options.icon_name] One of `art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`,\n  `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`,\n  `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`,\n  `unusual stories`, `video`, `None`\n  * @param {string} [options.key_color] A six-digit RGB hex color, preceded by '#'\n  * @param {string} [options.weighting_scheme] One of 'classic', 'fresh'\n  * @returns {Promise} The updated version of this multireddit\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').edit({visibility: 'hidden'})\n  */\n\n\n  edit(_ref3) {\n    var _ref3$name = _ref3.name,\n        name = _ref3$name === void 0 ? '' : _ref3$name,\n        description = _ref3.description,\n        icon_name = _ref3.icon_name,\n        key_color = _ref3.key_color,\n        visibility = _ref3.visibility,\n        weighting_scheme = _ref3.weighting_scheme;\n    var display_name = name.length ? name : this.name;\n    return this._put({\n      uri: \"api/multi\".concat(this._path),\n      form: {\n        model: JSON.stringify({\n          description_md: description,\n          display_name,\n          icon_name,\n          key_color,\n          visibility,\n          weighting_scheme\n        })\n      }\n    });\n  }\n  /**\n  * @summary Adds a subreddit to this multireddit.\n  * @param {Subreddit} sub The Subreddit object to add (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the reuqest is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').addSubreddit('cookies')\n  */\n\n\n  addSubreddit(sub) {\n    sub = typeof sub === 'string' ? sub : sub.display_name;\n    return this._put({\n      uri: \"api/multi\".concat(this._path, \"/r/\").concat(sub),\n      form: {\n        model: JSON.stringify({\n          name: sub\n        })\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes a subreddit from this multireddit.\n  * @param {Subreddit} sub The Subreddit object to remove (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the request is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').removeSubreddit('cookies')\n  */\n\n\n  removeSubreddit(sub) {\n    return this._delete({\n      uri: \"api/multi\".concat(this._path, \"/r/\").concat(typeof sub === 'string' ? sub : sub.display_name)\n    }).return(this);\n  }\n  /* Note: The endpoints GET/PUT /api/multi/multipath/description and GET /api/multi/multipath/r/srname are intentionally not\n  included, because they're redundant and the same thing can be achieved by simply using fetch() and edit(). */\n\n\n}; // MultiReddit#delete is not in the class body since Safari 9 can't parse the `delete` function name in class bodies.\n\n/**\n* @function\n* @name delete\n* @summary Deletes this multireddit.\n* @returns {Promise} A Promise that fulfills when this request is complete\n* @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').delete()\n* @memberof MultiReddit\n* @instance\n*/\n\nObject.defineProperty(MultiReddit.prototype, 'delete', {\n  value() {\n    return this._delete({\n      uri: \"api/multi\".concat(this._path)\n    });\n  },\n\n  configurable: true,\n  writable: true\n});\nvar _default = MultiReddit;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}